# Dialogs
GET           /dialogs/newTransformTask/:project                             controllers.transform.TransformDialogs.transformationTaskDialog(project: String, task = "")
GET           /dialogs/editTransformTask/:project/:task                      controllers.transform.TransformDialogs.transformationTaskDialog(project: String, task: String)
GET           /dialogs/deleteRule/:name                                      controllers.transform.TransformDialogs.deleteRuleDialog(name: String)

# Transformation Editor
GET           /:project/:task/editor                                         controllers.transform.TransformEditor.start(project: String, task: String, rule = "")
GET           /:project/:task/editor/rule/:rule                              controllers.transform.TransformEditor.start(project: String, task: String, rule: String)
GET           /:project/:task/editor/:rule                                   controllers.transform.TransformEditor.editor(project: String, task: String, rule: String)
GET           /:project/:task/editor/widgets/property                        controllers.transform.TransformEditor.propertyDetails(project: String, task: String, property: String)
GET           /:project/:task/editor/widgets/paths                           controllers.transform.TransformEditor.paths(project: String, task: String)
GET           /:project/:task/editor/widgets/score                           controllers.transform.TransformEditor.score(project: String, task: String)

# Evaluate Transformation
GET           /:project/:task/evaluate                                       controllers.transform.EvaluateTransform.evaluate(project: String, task: String, offset: Int ?= 0, limit: Int ?= 100)
GET           /:project/:task/evaluate/generatedEntities                     controllers.transform.EvaluateTransform.generatedEntities(project: String, task: String, offset: Int ?= 0, limit: Int ?= 100)

# Execute Transformation
GET           /:project/:task/execute                                        controllers.transform.ExecuteTransformTab.execute(project: String, task: String)
GET           /:project/:task/execute/statistics                             controllers.transform.ExecuteTransformTab.executeStatistics(project: String, task: String)
GET           /:project/:task/executeDialog                                  controllers.transform.ExecuteTransformTab.executeDialog(project: String, task: String)
GET           /:project/:task/execute/statusStream                           controllers.transform.ExecuteTransformTab.statusStream(project: String, task: String)

# API
GET           /tasks/:project/:task                              controllers.transform.TransformTaskApi.getTransformTask(project: String, task: String)
PUT           /tasks/:project/:task                              controllers.transform.TransformTaskApi.putTransformTask(project: String, task: String)
DELETE        /tasks/:project/:task                              controllers.transform.TransformTaskApi.deleteTransformTask(project: String, task: String, removeDependentTasks: Boolean ?= false)
GET           /tasks/:project/:task/rules                        controllers.transform.TransformTaskApi.getRules(project: String, task: String)
PUT           /tasks/:project/:task/rules                        controllers.transform.TransformTaskApi.putRules(project: String, task: String)
GET           /tasks/:project/:task/rule/:rule                   controllers.transform.TransformTaskApi.getRule(project: String, task: String, rule: String)
PUT           /tasks/:project/:task/rule/:rule                   controllers.transform.TransformTaskApi.putRule(project: String, task: String, rule: String)
DELETE        /tasks/:project/:task/rule/:rule                   controllers.transform.TransformTaskApi.deleteRule(project: String, task: String, rule: String)
POST          /tasks/:project/:task/rule/:rule/rules             controllers.transform.TransformTaskApi.appendRule(project: String, task: String, rule: String)
POST          /tasks/:project/:task/rule/:rule/rules/reorder     controllers.transform.TransformTaskApi.reorderRules(project: String, task: String, rule: String)

POST          /tasks/:project/:task/reloadCache                  controllers.transform.TransformTaskApi.reloadTransformCache(project: String, task: String)
PUT           /tasks/:project/:task/executeTransform             controllers.transform.TransformTaskApi.executeTransformTask(project: String, task: String)
POST          /tasks/:project/:task/peak/:rule                   controllers.transform.TransformTaskApi.peakIntoTransformRule(project: String, task: String, rule: String)

GET           /tasks/:project/:task/sourcePathCompletions                    controllers.transform.TransformTaskApi.sourcePathCompletions(project: String, task: String, term: String)
GET           /tasks/:project/:task/targetPathCompletions                    controllers.transform.TransformTaskApi.targetPathCompletions(project: String, task: String, sourcePath: Option[String], term: String)
GET           /tasks/:project/:task/targetVocabulary/typeSuggestions         controllers.transform.TransformTaskApi.typeCandidates(project: String, task: String)
GET           /tasks/:project/:task/targetVocabulary/propertiesByClass       controllers.transform.TransformTaskApi.propertiesByType(project: String, task: String, classUri: String)
GET           /tasks/:project/:task/targetVocabulary/relationsOfClass        controllers.transform.TransformTaskApi.relationsOfType(project: String, task: String, classUri: String)

POST          /tasks/:project/:task/transformInput                           controllers.transform.TransformTaskApi.postTransformInput(project: String, task: String)
