# Transformation Editor
GET           /:project/:task/editor                                               controllers.transform.TransformEditor.start(project: String, task: String, rule = "")
GET           /:project/:task/editor/rule/:rule                                    controllers.transform.TransformEditor.start(project: String, task: String, rule: String)
GET           /:project/:task/editor/:rule                                         controllers.transform.TransformEditor.editor(project: String, task: String, rule: String)
GET           /:project/:task/editor/widgets/property                              controllers.transform.TransformEditor.propertyDetails(project: String, task: String, property: String)
GET           /:project/:task/editor/widgets/paths                                 controllers.transform.TransformEditor.paths(project: String, task: String)
GET           /:project/:task/editor/rule/:rule/widgets/paths                      controllers.transform.TransformEditor.rulePaths(project: String, task: String, rule: String, groupPaths: Boolean ?= true)
GET           /:project/:task/editor/widgets/score                                 controllers.transform.TransformEditor.score(project: String, task: String)

# Evaluate Transformation
GET           /:project/:task/evaluate                                             controllers.transform.EvaluateTransform.evaluate(project: String, task: String, rule: Option[String] ?= None, offset: Int ?= 0, limit: Int ?= 100)
GET           /:project/:task/evaluate/generatedEntities                           controllers.transform.EvaluateTransform.generatedEntities(project: String, task: String, rule: Option[String] ?= None, offset: Int ?= 0, limit: Int ?= 100)

# Execute Transformation
GET           /:project/:task/execute                                              controllers.transform.ExecuteTransformTab.execute(project: String, task: String)
GET           /:project/:task/execute/report                                       controllers.transform.ExecuteTransformTab.executionReport(project: String, task: String)

# API
GET           /tasks/:project/:task                                                controllers.transform.TransformTaskApi.getTransformTask(project: String, task: String)
PUT           /tasks/:project/:task                                                controllers.transform.TransformTaskApi.putTransformTask(project: String, task: String, createOnly: Boolean = false)
DELETE        /tasks/:project/:task                                                controllers.transform.TransformTaskApi.deleteTransformTask(project: String, task: String, removeDependentTasks: Boolean ?= false)
GET           /tasks/:project/:task/rules                                          controllers.transform.TransformTaskApi.getRules(project: String, task: String)
PUT           /tasks/:project/:task/rules                                          controllers.transform.TransformTaskApi.putRules(project: String, task: String)
GET           /tasks/:project/:task/rule/:rule                                     controllers.transform.TransformTaskApi.getRule(project: String, task: String, rule: String, convertToComplex: Option[Boolean] ?= None)
PUT           /tasks/:project/:task/rule/:rule                                     controllers.transform.TransformTaskApi.putRule(project: String, task: String, rule: String)
DELETE        /tasks/:project/:task/rule/:rule                                     controllers.transform.TransformTaskApi.deleteRule(project: String, task: String, rule: String)
POST          /tasks/:project/:task/rule/:rule/rules                               controllers.transform.TransformTaskApi.appendRule(project: String, task: String, rule: String, afterRuleId: Option[String] ?= None)
POST          /tasks/:project/:task/rule/:rule/rules/copyFrom                      controllers.transform.TransformTaskApi.copyRule(project: String, task: String, rule: String, sourceProject: String, sourceTask: String, sourceRule: String, afterRuleId: Option[String] ?= None)
POST          /tasks/:project/:task/rule/:rule/rules/reorder                       controllers.transform.TransformTaskApi.reorderRules(project: String, task: String, rule: String)
POST          /tasks/:project/:task/reloadCache                                    controllers.transform.TransformTaskApi.reloadTransformCache(project: String, task: String)
PUT           /tasks/:project/:task/executeTransform                               controllers.transform.TransformTaskApi.executeTransformTask(project: String, task: String)

POST          /tasks/:project/:task/peak/:rule                                     controllers.transform.PeakTransformApi.peak(project: String, task: String, rule: String, limit: Int ?= controllers.transform.PeakTransformApi.TRANSFORMATION_PREVIEW_LIMIT, maxTryEntities: Int ?= controllers.transform.PeakTransformApi.MAX_TRY_ENTITIES_DEFAULT)
POST          /tasks/:project/:task/peak/:rule/childRule                           controllers.transform.PeakTransformApi.peakChildRule(project: String, task: String, rule: String, limit: Int ?= controllers.transform.PeakTransformApi.TRANSFORMATION_PREVIEW_LIMIT, maxTryEntities: Int ?= controllers.transform.PeakTransformApi.MAX_TRY_ENTITIES_DEFAULT, objectPath: Option[String] ?= None)

GET           /tasks/:project/:task/rule/:rule/completions/sourcePaths             controllers.transform.AutoCompletionApi.sourcePathsGET(project: String, task: String, rule: String, term ?= "", maxResults: Int ?= 30)
POST          /tasks/:project/:task/rule/:rule/completions/sourcePaths             controllers.transform.AutoCompletionApi.sourcePathsPOST(project: String, task: String, rule: String, term ?= "", maxResults: Int ?= 30)
GET           /tasks/:project/:task/rule/:rule/completions/targetTypes             controllers.transform.AutoCompletionApi.targetTypes(project: String, task: String, rule: String, term ?= "", maxResults: Int  ?= 30)
GET           /tasks/:project/:task/rule/:rule/completions/targetProperties        controllers.transform.AutoCompletionApi.targetPropertiesGet(project: String, task: String, rule: String, term ?= "", maxResults: Int  ?= 30, fullUris: Boolean ?= false)
POST          /tasks/:project/:task/rule/:rule/completions/targetProperties        controllers.transform.AutoCompletionApi.targetPropertiesPost(project: String, task: String, rule: String, term ?= "", maxResults: Int  ?= 30, fullUris: Boolean ?= false)
GET           /tasks/:project/:task/rule/:rule/completions/valueTypes              controllers.transform.AutoCompletionApi.valueTypes(project: String, task: String, rule: String, term ?= "", maxResults: Int  ?= 30)
POST          /tasks/:project/:task/rule/:rule/completions/partialSourcePaths      controllers.transform.AutoCompletionApi.partialSourcePath(project: String, task: String, rule: String)
POST          /tasks/:project/:task/rule/:rule/completions/uriPattern              controllers.transform.AutoCompletionApi.uriPattern(project: String, task: String, rule: String)

GET           /tasks/:project/:task/targetVocabulary/vocabularies                  controllers.transform.TargetVocabularyApi.vocabularyInfos(project: String, task: String)
GET           /tasks/:project/:task/targetVocabulary/type                          controllers.transform.TargetVocabularyApi.getTypeInfo(project: String, task: String, uri: String)
GET           /tasks/:project/:task/targetVocabulary/property                      controllers.transform.TargetVocabularyApi.getPropertyInfo(project: String, task: String, uri: String)
GET           /tasks/:project/:task/targetVocabulary/typeOrProperty                controllers.transform.TargetVocabularyApi.getTypeOrPropertyInfo(project: String, task: String, uri: String)
GET           /tasks/:project/:task/targetVocabulary/propertiesByClass             controllers.transform.TargetVocabularyApi.propertiesByType(project: String, task: String, classUri: String, includeGeneralProperties: Boolean ?= false)
GET           /tasks/:project/:task/targetVocabulary/relationsOfClass              controllers.transform.TargetVocabularyApi.relationsOfType(project: String, task: String, classUri: String)

# Endpoints for RDF source datasets
POST          /tasks/:project/:task/sourceVocabulary/propertiesByClass             controllers.transform.TargetVocabularyApi.sourcePropertiesByType(project: String, task: String)

POST          /tasks/:project/:task/transformInput                                 controllers.transform.TransformTaskApi.postTransformInput(project: String, task: String)
GET           /tasks/:project/:task/rule/:rule/valueSourcePaths                    controllers.transform.SourcePathsApi.valueSourcePaths(project: String, task: String, rule: String, maxDepth: Int ?= Int.MaxValue, unusedOnly: Boolean ?= false, usedOnly: Boolean ?= false)
GET           /tasks/:project/:task/rule/:rule/valueSourcePathsInfo                controllers.transform.SourcePathsApi.valueSourcePathsFullInfo(project: String, task: String, rule: String, maxDepth: Int ?= Int.MaxValue, objectInfo: Boolean ?= false)

POST          /tasks/:project/:task/rule/:rule/evaluateRule                        controllers.transform.EvaluateTransformApi.evaluateRule(project: String, task:String, rule: String, limit: Int ?= 3)
GET           /tasks/:project/:task/rule/:rule/evaluated                           controllers.transform.EvaluateTransformApi.evaluateSpecificRule(project: String, task:String, rule: String, limit: Int ?= 50, showOnlyEntitiesWithUris: Boolean ?= false)
