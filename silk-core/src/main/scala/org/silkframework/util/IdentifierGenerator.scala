package org.silkframework.util

/**
  * Generates identifiers that are unique in its scope.
 *  Thread-safe.
  */
class IdentifierGenerator {

  /**
   * Remembers all existing identifiers.
   */
  private var identifiers = Set[Identifier]()

  /**
    * Generates a new unique identifier.
   *
   * @param desiredId The desired identifier. Invalid characters will be removed, so it's not required that this is a valid identifier.
   * @return If the provided identifier is already unique, it will be returned unchanged. Otherwise, a unique identifier is generated by appending a number.
    */
  def generate(desiredId: String): Identifier = synchronized {
    val identifier = Identifier.fromAllowed(desiredId)
    if(!identifiers.contains(identifier)) {
      // Identifier is already unique
      identifiers += identifier
      identifier
    } else {
      // Generate a new identifier by adding a unique number
      val (name, num) = split(identifier)
      for(i <- Iterator.from(num + 1)) {
        val newIdentifier = name + i
        if(!identifiers.contains(newIdentifier)) {
          identifiers += newIdentifier
          return newIdentifier
        }
      }
      throw new IllegalStateException()
    }
  }

  /**
    * Adds an existing identifier without changing it.
    */
  def add(identifier: Identifier): Unit = synchronized {
    identifiers += identifier
  }

  /**
    * Splits an identifier into a name and a number.
    * For instance 'name3' is split into (name, 3)
    */
  private def split(identifier: Identifier): (String, Int) = {
    val str = identifier.toString
    val splitIndex = str.length - str.reverse.indexWhere(!_.isDigit)
    val (name, numStr) = str.splitAt(splitIndex)
    val num = if(numStr.isEmpty) 0 else numStr.toInt
    (name, num)
  }

}

/**
 * Adds a prefix to all generated identifiers.
 */
class PrefixedIdentifierGenerator(prefix: String) extends IdentifierGenerator {

  override def generate(desiredId: String): Identifier = {
    super.generate(prefix + desiredId)
  }

}