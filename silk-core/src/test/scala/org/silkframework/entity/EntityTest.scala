package org.silkframework.entity

import java.io.{ByteArrayInputStream, ByteArrayOutputStream, DataInputStream, DataOutputStream}

import org.silkframework.entity.paths.UntypedPath
import org.silkframework.util.Uri
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers


class EntityTest extends AnyFlatSpec with Matchers {

  val schema = EntitySchema(typeUri = Uri(""), typedPaths = IndexedSeq(UntypedPath("path1").asStringTypedPath, UntypedPath("path2").asStringTypedPath), filter = Restriction.empty)

  val entity1 = Entity("http://silk-framework.com/example", IndexedSeq(Seq("value1", "value2"), Seq("value3")), schema)

  val entity2 = Entity("http://silk-framework.com/example", IndexedSeq(Seq("dÃ©clarÃ©s", "v2"), Seq("v3")), schema)

  val entity3 = Entity("http://silk-framework.com/example", IndexedSeq(Seq("MULTIPOLYGON(((477353.59375 4209291,477411.90625 4209215,477406.1875 4209050,477442.5 4208972,477624 4208855,477859.90625 4208777,477865.09375 4208775,477886.6875 4208769,477906.8125 4208756,477925.6875 4208743,477945.6875 4208726,478020.40625 4208674,478112.40625 4208595,478129.5 4208583,478155.09375 4208568,478185.59375 4208555,478205.09375 4208550,478228.3125 4208536,478216.8125 4208522,478194.1875 4208492,478169.5 4208456,478128.90625 4208407,478067 4208343,478035.5 4208315,478005.09375 4208291,477969.59375 4208266,477896.5 4208209,477858.3125 4208176,477852.5 4208171,477792.8125 4208118,477741.3125 4208082,477694.6875 4208062,477674.40625 4208057,477654.09375 4208053,477621.09375 4208045,477599.59375 4208038,477566.5 4208022,477547.5 4208013,477516.90625 4207997,477496.59375 4207986,477467.3125 4207964,477440.5 4207939,477425.1875 4207924,477414.8125 4207903,477399.40625 4207879,477389.09375 4207857,477381.3125 4207833,477379.8125 4207805,477385.8125 4207773,477394.1875 4207732,477399 4207705,477401.3125 4207675,477404.90625 4207654,477413.5 4207628,477419.5 4207597,477421.59375 4207550,477421.09375 4207500,477423.3125 4207465,477430.59375 4207430,477437.90625 4207407,477445.3125 4207384,477455.1875 4207356,477463.6875 4207317,477462.09375 4207291,477456.8125 4207260,477447.6875 4207238,477437.3125 4207209,477419.1875 4207163,477397.1875 4207111,477380.3125 4207071,477370.09375 4207053,477357.1875 4207034,477343.09375 4207009,477331.40625 4206983,477319.8125 4206956,477303.09375 4206927,477288.90625 4206898,477274.6875 4206868,477265.5 4206839,477261.40625 4206807,477254.8125 4206779,477253.1875 4206738,477259.3125 4206711,477266.6875 4206692,477282.90625 4206669,477297.90625 4206651,477316.6875 4206634,477340.59375 4206617,477360.6875 4206604,477382.09375 4206593,477407.3125 4206580,477430 4206570,477461.5 4206562,477485.5 4206557,477522.1875 4206550,477543.59375 4206547,477577.8125 4206542,477625.8125 4206540,477647.3125 4206541,477689.09375 4206546,477713.1875 4206553,477737.3125 4206555,477763.8125 4206553,477786.5 4206547,477818.09375 4206538,477839.5 4206531,477853.8125 4206523,477857.09375 4206521,477870.90625 4206515,477880.3125 4206518,477923.59375 4206521,477999.09375 4206543,478029.8125 4206550,478078.3125 4206557,478162.6875 4206577,478193.3125 4206581,478222.5 4206577,478252.90625 4206561,478288.3125 4206547,478326.40625 4206536,478356.8125 4206529,478411.59375 4206524,478435.8125 4206525,478498.3125 4206532,478537.90625 4206539,478564.6875 4206541,478586.3125 4206537,478616.6875 4206525,478635.59375 4206514,478687.59375 4206496,478729.3125 4206472,478770.8125 4206440,478784.59375 4206424,478822 4206363,478836.90625 4206341,478872 4206300,478887 4206278,478928.40625 4206238,478947.1875 4206216,478991.1875 4206174,479015 4206148,479037.09375 4206131,479073 4206105,479088.09375 4206091,479105.59375 4206070,479121.8125 4206046,479140.40625 4206007,479157.8125 4205979,479207.90625 4205920,479231.6875 4205888,479254 4205851,479272.8125 4205830,479333.1875 4205771,479368.1875 4205728,479388.3125 4205710,479408.40625 4205687,479432.09375 4205656,479455.8125 4205619,479480.90625 4205592,479542.40625 4205533,479557.40625 4205514,479580.09375 4205494,479621.6875 4205464,479635.5 4205449,479662.09375 4205437,479664.1875 4205437,479686.1875 4205432,479711.6875 4205435,479714.1875 4205437,479740 4205452,479755.59375 4205471,479776.3125 4205500,479818.3125 4205579,479832.5 4205596,479863.90625 4205650,479878.1875 4205672,479931.90625 4205773,479958.6875 4205813,479993.3125 4205793,480097.1875 4205751,480155.59375 4205738,480205 4205718,480246.6875 4205697,480274.5 4205680,480297.1875 4205662,480340.09375 4205637,480394.40625 4205602,480462.6875 4205565,480486.40625 4205556,480512.5 4205535,480539.8125 4205542,480556.90625 4205573,480590.90625 4205625,480607.8125 4205646,480619.5 4205667,480645.40625 4205705,480664.6875 4205751,480686.09375 4205796,480692.6875 4205816,480726.40625 4205881,480738 4205899,480759.90625 4205914,480771.40625 4205894,480796.09375 4205871,480827.3125 4205850,480847 4205842,480939.40625 4205813,481030.8125 4205768,481063.1875 4205756,481106.3125 4205735,481134.1875 4205720,481223.40625 4205679,481246 4205668,481151.09375 4205620,481110.5 4205589,481056.40625 4205560,481030 4205553,481010.6875 4205533,480983.5 4205518,480953.8125 4205497,480936.5 4205478,480907 4205435,480903.6875 4205430,481014 4205314,481056.8125 4205270,481093.1875 4205232,481123 4205199,481151.5 4205171,481183.90625 4205141,481209.8125 4205116,481242.09375 4205087,481278.09375 4205060,481307.59375 4205042,481339.6875 4205021,481357.6875 4205008,481381.09375 4204981,481407.40625 4204941,481433.40625 4204910,481450.6875 4204877,481464.09375 4204849,481477.5 4204819,481483.1875 4204796,481490.40625 4204760,481497.5 4204732,481490.5 4204710,481473.40625 4204690,481447.59375 4204665,481430.3125 4204651,481414.5 4204632,481399.90625 4204611,481386.59375 4204592,481370.6875 4204573,481347.3125 4204553,481328 4204518,481332.8125 4204480,481346 4204458,481364.5 4204429,481359.1875 4204391,481345.90625 4204369,481334.09375 4204339,481322.40625 4204308,481315.8125 4204270,481319.09375 4204242,481322.3125 4204215,481324.5 4204183,481324.40625 4204137,481325.6875 4204092,481324.90625 4204026,481326.3125 4203977,481328.59375 4203936,481329.3125 4203912,481329.1875 4203869,481329.90625 4203842,481329.1875 4203822,481304.59375 4203798,481287.5 4203777,481278.1875 4203748,481272.5 4203728,481259.5 4203694,481247.8125 4203660,481246.3125 4203622,481254.59375 4203595,481263 4203566,481264.09375 4203525,481261.1875 4203492,481249.59375 4203455,481241.59375 4203424,481232.59375 4203408,481230.8125 4203405,481200.8125 4203392,481180.8125 4203389,481153.09375 4203387,481120.3125 4203385,481095.09375 4203385,481059.8125 4203386,481015.59375 4203388,480975.1875 4203392,480939.8125 4203396,480905.40625 4203407,480871.1875 4203415,480839.5 4203421,480812.8125 4203428,480787.40625 4203435,480763.1875 4203446,480744 4203454,480723.5 4203465,480702.90625 4203481,480689.8125 4203499,480700.59375 4203520,480705.09375 4203543,480687.6875 4203580,480669.59375 4203596,480649.09375 4203608,480628.6875 4203615,480604.59375 4203622,480575.1875 4203637,480538 4203660,480503.1875 4203688,480478.8125 4203704,480454.5 4203718,480434.1875 4203724,480387.40625 4203726,480352.09375 4203728,480314.1875 4203730,480266.1875 4203734,480213.1875 4203735,480161.59375 4203732,480111.3125 4203728,480079.8125 4203728,480048 4203738,480020.09375 4203743,479987.3125 4203745,479954.5 4203743,479920.6875 4203735,479886.8125 4203730,479850.59375 4203718,479817 4203701,479788.5 4203683,479763.8125 4203664,479746.59375 4203647,479728 4203636,479707.90625 4203630,479668 4203662,479643.5 4203681,479622.90625 4203698,479600.90625 4203718,479581.3125 4203743,479558.1875 4203760,479534.40625 4203755,479495.8125 4203738,479447.1875 4203716,479391.09375 4203690,479335.1875 4203660,479280.8125 4203621,479227.5 4203585,479178 4203553,479130.6875 4203528,479083.59375 4203499,479037.59375 4203474,478999.09375 4203453,478961.90625 4203431,478928.40625 4203411,478904.8125 4203397,478886.1875 4203387,478861.40625 4203370,478822.8125 4203353,478795.3125 4203345,478757.40625 4203346,478727.1875 4203346,478693.1875 4203345,478666.6875 4203344,478644 4203344,478598 4203322,478574.3125 4203309,478553.1875 4203297,478555.8125 4203249,478570.8125 4203208,478589.5 4203166,478609.5 4203127,478620.40625 4203097,478632.8125 4203060,478641.09375 4203031,478647.09375 4202997,478649.09375 4202969,478647.1875 4202945,478642.90625 4202916,478639.8125 4202893,478647 4202859,478662.8125 4202835,478678.3125 4202820,478695.1875 4202801,478722.40625 4202775,478752.09375 4202750,478785.40625 4202730,478826.3125 4202710,478873.40625 4202694,478921.6875 4202677,478970.09375 4202662,479012 4202648,479047.8125 4202631,479081.09375 4202611,479115.8125 4202586,479150.5 4202563,479183.8125 4202543,479213.3125 4202527,479236.3125 4202512,479264.59375 4202494,479289 4202478,479315.8125 4202465,479339.1875 4202440,479351.59375 4202400,479353.5 4202376,479357.40625 4202326,479359.3125 4202299,479352.6875 4202264,479342.1875 4202233,479331.5 4202209,479323.3125 4202188,479321.8125 4202183,479317.09375 4202182,479291 4202170,479263.6875 4202154,479241.1875 4202144,479210.90625 4202146,479179.1875 4202155,479147.3125 4202166,479111.6875 4202179,479070.90625 4202196,479020.90625 4202228,478969.3125 4202270,478912.6875 4202310,478860.09375 4202345,478798.5 4202385,478747.09375 4202422,478710.90625 4202454,478678.8125 4202476,478648.1875 4202490,478610.3125 4202492,478567.6875 4202482,478523.90625 4202469,478481.1875 4202463,478437.09375 4202462,478385.3125 4202465,478333.59375 4202467,478278 4202470,478223.6875 4202475,478184.59375 4202475,478145.5 4202476,478107.6875 4202474,478062.3125 4202474,478012.90625 4202484,477963.1875 4202503,477923.90625 4202511,477885.6875 4202523,477907.90625 4202496,477934 4202462,477966.6875 4202421,477989.09375 4202385,478010.09375 4202353,478033.6875 4202320,478067.5 4202281,478100.3125 4202236,478125.3125 4202198,478151.5 4202159,478175.3125 4202119,478196.40625 4202084,478222.6875 4202046,478245 4202012,478272.6875 4201967,478292.40625 4201937,478323.8125 4201895,478339.40625 4201879,478352.40625 4201863,478370.8125 4201838,478387.90625 4201810,478406.8125 4201762,478415.1875 4201725,478412.8125 4201727,478366.5 4201761,478340 4201764,478306.3125 4201750,478282.6875 4201736,478253.1875 4201707,478231.40625 4201676,478203.3125 4201642,478183.5 4201630,478149.8125 4201617,478124.6875 4201611,478102.1875 4201605,478082.09375 4201602,478060.8125 4201598,478034.3125 4201597,478004 4201600,477983.6875 4201603,477961 4201604,477925.59375 4201607,477905.6875 4201598,477876.09375 4201574,477840.40625 4201546,477839 4201545,477392.5 4201219,477659.6875 4200851,477565.90625 4200724,477406.59375 4200630,477302.59375 4200703,477039.90625 4200650,477000.3125 4200642,476938.6875 4200757,476900.6875 4200759,476691.8125 4200746,476454.6875 4200608,476368.3125 4200644,475970.1875 4200367,475848.40625 4200399,475720.8125 4200346,475709 4200063,475625.90625 4200002,475493.6875 4199904,474767.3125 4200622,475250.6875 4201063,475127.09375 4201162,475133.8125 4201292,474965.1875 4201473,474858.3125 4201543,474697.3125 4201570,474157.09375 4201486,474078.5 4201502,474023.5 4201572,473993.3125 4201546,473975.1875 4201598,473769.90625 4201781,473782.59375 4201945,473614.8125 4202030,473545.8125 4202114,473978.8125 4202468,473978.3125 4202704,473915.3125 4202831,473129.90625 4202848,472922.90625 4202924,472603.5 4203127,472378.3125 4203154,472796.40625 4203753,472982.3125 4204131,473096.5 4204280,473203.1875 4204568,473262.3125 4204775,472881.3125 4204963,472890 4204982,472893.3125 4204990,473062.90625 4205167,473425.8125 4205403,473520.59375 4205457,474002.3125 4205728,475014.8125 4206653,475125 4206932,475247.3125 4207242,475235.09375 4207338,475428.3125 4207590,475801 4207861,476062.8125 4208180,476131.6875 4208347,476639.6875 4208619,476727.3125 4208718,476754.3125 4208833,476870 4208976,476941.09375 4209064,477261.5 4209206,477353.59375 4209291)))"), Seq()), schema)
  
  "Entity" should "be serializable" in {
    serialized(entity1) should be (entity1)
  }

  "Entity" should "be serializable if it contains non-ASCII characters" in {
    serialized(entity2) should be (entity2)
  }

  "Entity" should "be serializable if it contains big WKT literals" in {
    serialized(entity3) should be (entity3)
  }

  def serialized(entity: Entity): Entity = {
    // Serialize entity
    val outputStream = new ByteArrayOutputStream()
    entity.serialize(new DataOutputStream(outputStream))
    // Deserialize entity
    val inputStream = new ByteArrayInputStream(outputStream.toByteArray)
    Entity.deserialize(new DataInputStream(inputStream), entity.schema)
  }

  /* COMPLEX ENTITIES */

  val subSchema1 = EntitySchema(typeUri = Uri("sub1"), typedPaths = IndexedSeq(UntypedPath("path3").asStringTypedPath, UntypedPath("path4").asStringTypedPath), filter = Restriction.empty, UntypedPath("sub1"))
  val subSchema2 = EntitySchema(typeUri = Uri("sub2"), typedPaths = IndexedSeq(UntypedPath("path5").asStringTypedPath, UntypedPath("path6").asStringTypedPath), filter = Restriction.empty, UntypedPath("sub2"))

  val complexSchema = new MultiEntitySchema( schema, IndexedSeq(subSchema1, subSchema2))

  val se1 = Entity("http://silk-framework.com/example/subE1", IndexedSeq(Seq("value3", "value4"), Seq("value11")), subSchema1)
  val se2 = Entity("http://silk-framework.com/example/subE2", IndexedSeq(Seq("value5", "value6"), Seq()), subSchema2)

  "Multiple entities" should "serialize/deserialize correctly" in {
    val outputStream = new ByteArrayOutputStream()
    val dataOutputStream = new DataOutputStream(outputStream)
    se1.serialize(dataOutputStream)
    se2.serialize(dataOutputStream)
    // Deserialize entity
    val inputStream = new ByteArrayInputStream(outputStream.toByteArray)
    val dataInputStream = new DataInputStream(inputStream)
    val re1 = Entity.deserialize(dataInputStream, subSchema1)
    val re2 = Entity.deserialize(dataInputStream, subSchema2)
    re1 shouldBe se1
    re2 shouldBe se2
  }
}
