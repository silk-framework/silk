export type SuggestionTypeValues = 'object' | 'value';

// the object which pass parent for adding new suggestion
export interface IAddedSuggestion {
    // selected source
    source: string;

    // selected target uri
    targetUri: string;

    // target type
    type: SuggestionTypeValues;
}

export interface ITargetWithSelected extends ISuggestionCandidate {
    // indicate selected target
    _selected: boolean;
}

export interface IPageSuggestion extends ITransformedSuggestion {
    // modified target element
    candidates: ITargetWithSelected[]
}

export interface ISuggestionCandidate {
    // the suggestion type, can be 'object' or 'value'
    type: SuggestionTypeValues;

    // the target uri
    uri: string;

    // the confidence number, this also shows ordering
    confidence: number;

    description?: string;

    label?: string;

    // Optional URI of the graph this property has been loaded from
    graph?: string;

    _autogenerated?: boolean;

    /** If the uri/path is already mapped in the same transformation. */
    alreadyMapped?: boolean
}

export interface ITransformedSuggestion {
    // URI or source path of the left side of the suggestion table. Either source path or target URI depending on matching direction.
    uri: string;

    // targets array
    candidates: ISuggestionCandidate[];

    description?: string;

    label?: string;

    // Optional URI of the graph this property has been loaded from
    graph?: string;

    link?: string;

    /** If the uri/path is already mapped in the same transformation. */
    alreadyMapped?: boolean

    /** The type of the suggested URI or source path. */
    pathType?: SuggestionTypeValues

    /** Optional info if this is an 'object' type path. */
    objectInfo?: {
        dataTypeSubPaths: string[]
        objectSubPaths: string[]
    }
}

export interface IPlainObject {
    // plain object interface
    [key: string]: string | number
}

export type FilterVisibility = "always" | "sourceViewOnly" | "vocabularyViewOnly"

export interface IColumnFilters {
    // the label for filter
    label: string;
    // the action name
    action: string;
    // When a filter should be shown in the filter menu.
    selectable: FilterVisibility
}

export interface ITableHeader {
    // the header column title, null values hidden
    header: string | null;

    // the column keycode
    key: string;

    // For testing purposes, the test ID of the sort button/icon
    sortDataTestId?: string

    // For testing purposes, the test ID of the filter button/icon
    filterDataTestId?: string
}

export interface ISortDirection {
    // column keycode
    column: string;
    // store ordering direction, '' - is default value
    modifier: 'asc' | 'desc' | false
}

export interface IPrefix {
    uri: string;

    key: string;
}

/** Vocabulary information. */
export interface IVocabularyInfo {
    // URI / ID of the vocabulary
    uri: string
    // Optional (preferred) label of the vocabulary
    label?: string
    // Number of classes
    nrClasses: number
    // Number of properties
    nrProperties: number
}
