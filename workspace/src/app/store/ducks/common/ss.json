[
    {
        "pluginType": "PathInputOperator",
        "pluginId": "sourcePathInput",
        "portSpecification": {
            "minInputPorts": 0,
            "maxInputPorts": 0
        },
        "label": "Source path",
        "parameterSpecification": {
            "path": {
                "label": "Path",
                "defaultValue": "",
                "type": "pathInput",
                "description": "The source input path as Silk path expression.",
                "advanced": false,
                "required": true,
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": false,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                }
            }
        },
        "categories": ["Input", "Recommended"],
        "description": "The value path of the source input of the linking task.",
        "tags": [],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "PathInputOperator",
        "pluginId": "targetPathInput",
        "portSpecification": {
            "minInputPorts": 0,
            "maxInputPorts": 0
        },
        "label": "Target path",
        "parameterSpecification": {
            "path": {
                "label": "Path",
                "defaultValue": "",
                "type": "pathInput",
                "description": "The source input path as Silk path expression.",
                "advanced": false,
                "required": true,
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": false,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                }
            }
        },
        "categories": ["Input", "Recommended"],
        "description": "The value path of the target input of the linking task.",
        "tags": [],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "RetrieveCoordinates",
        "label": "Retrieve coordinates",
        "description": "Retrieves geographic coordinates using Nominatim.",
        "categories": ["Geo"],
        "parameterSpecification": {
            "additionalParameters": {
                "label": "Additional parameters",
                "description": "Additional URL parameters to be attached to each HTTP search request. Example: '&countrycodes=de&addressdetails=1'. Consult the API documentation for a list of available parameters.",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "RetrieveLatitude",
        "label": "Retrieve latitude",
        "description": "Retrieves geographic coordinates using Nominatim and returns the latitude.",
        "categories": ["Geo"],
        "parameterSpecification": {
            "additionalParameters": {
                "label": "Additional parameters",
                "description": "Additional URL parameters to be attached to each HTTP search request. Example: '&countrycodes=de&addressdetails=1'. Consult the API documentation for a list of available parameters.",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "RetrieveLongitude",
        "label": "Retrieve longitude",
        "description": "Retrieves geographic coordinates using Nominatim and returns the longitude.",
        "categories": ["Geo"],
        "parameterSpecification": {
            "additionalParameters": {
                "label": "Additional parameters",
                "description": "Additional URL parameters to be attached to each HTTP search request. Example: '&countrycodes=de&addressdetails=1'. Consult the API documentation for a list of available parameters.",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "readParameter",
        "label": "Read parameter",
        "description": "Reads a parameter from a Java Properties file.",
        "categories": ["Value"],
        "parameterSpecification": {
            "resource": {
                "label": "Resource",
                "description": "The Java properties file to read the parameter from.",
                "advanced": false,
                "required": true,
                "type": "resource",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": false,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": null
            },
            "parameter": {
                "label": "Parameter",
                "description": "The name of the parameter.",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeStopwords",
        "label": "Remove stopwords",
        "description": "Removes stopwords from all values. Each line in the stopword list contains a stopword. The separator defines a regex that is used for detecting words.",
        "categories": ["Filter"],
        "parameterSpecification": {
            "stopwordList": {
                "label": "Stopword list",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "resource",
                "defaultValue": null
            },
            "separator": {
                "label": "Separator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "[\\s-]+"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "datasetParameter",
        "label": "Dataset parameter",
        "description": "Reads a meta data parameter from a dataset in Corporate Memory. If authentication is enabled, workbench.superuser must be configured.",
        "categories": ["Value"],
        "parameterSpecification": {
            "project": {
                "label": "Project",
                "description": "The project of the dataset.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "cmem"
            },
            "dataset": {
                "label": "Dataset",
                "description": "The dataset the meta data parameter is read from.",
                "advanced": false,
                "required": true,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": ["project"]
                },
                "defaultValue": null
            },
            "key": {
                "label": "Key",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "lang": {
                "label": "Lang",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "TemplateTransformer",
        "label": "Evaluate template",
        "description": "Evaluates a template. Input values can be addressed using the variables 'input1', 'input2', etc.",
        "categories": ["Template"],
        "parameterSpecification": {
            "template": {
                "label": "Template",
                "description": "The template",
                "advanced": false,
                "required": true,
                "type": "textArea",
                "defaultValue": null
            },
            "language": {
                "label": "Language",
                "description": "The template language. Currently, Jinja is supported.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "Jinja"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "PhysicalQuantitiesNormalizer",
        "label": "Normalize physical quantity",
        "description": "Normalizes physical quantities.\nCan either convert to a configured unit or to SI base units.\nFor instance for lengths, values will be converted to metres if no target unit is configured.\nWill output the pure numeric value without the unit.\nIf one input is provided, the physical quantities are parsed from the provided strings of the form \"1 km\".\nIf two inputs are provided, the numeric values are parsed from the first input and the units are parsed from the second inputs.\n",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "targetUnit": {
                "label": "Target unit",
                "description": "Target unit. Can be left empty to convert to the respective SI base units.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "numberFormat": {
                "label": "Number format",
                "description": "The IETF BCP 47 language tag, e.g., 'en'.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "en"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "DateTypeParser",
        "label": "Parse date",
        "description": "Parses and normalizes dates in different formats.",
        "categories": ["Parser", "Date"],
        "parameterSpecification": {
            "inputDateFormatId": {
                "label": "Input format",
                "description": "The input date/time format used for parsing the date/time string.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "w3c Date"
            },
            "alternativeInputFormat": {
                "label": "Alternative input format",
                "description": "An input format string that should be used instead of the selected input format. Java DateFormat string.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "outputDateFormatId": {
                "label": "Output format",
                "description": "The output date/time format used for parsing the date/time string.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "w3c Date"
            },
            "alternativeOutputFormat": {
                "label": "Alternative output format",
                "description": "An output format string that should be used instead of the selected output format. Java DateFormat string.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "FloatTypeParser",
        "label": "Parse float",
        "description": "Parses and normalizes float values.",
        "categories": ["Parser"],
        "parameterSpecification": {
            "commaAsDecimalPoint": {
                "label": "Comma as decimal point",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "thousandSeparator": {
                "label": "Thousand separator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "bracketsForNegative": {
                "label": "Brackets for negative",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "GeoCoordinateParser",
        "label": "Parse geo coordinate",
        "description": "Parses and normalizes geo coordinates.",
        "categories": ["Parser"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "GeoLocationParser",
        "label": "Parse geo location",
        "description": "Parses and normalizes geo locations like continents, countries, states and cities.",
        "categories": ["Parser"],
        "parameterSpecification": {
            "parseTypeId": {
                "label": "Parse type id",
                "description": "What type of location should be parsed.",
                "advanced": false,
                "required": true,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": null
            },
            "fullStateName": {
                "label": "Full state name",
                "description": "Set to true if the full state name should be output instead of the 2-letter code.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "IntegerParser",
        "label": "Parse integer",
        "description": "Parses integer values.",
        "categories": ["Parser"],
        "parameterSpecification": {
            "commaAsDecimalPoint": {
                "label": "Comma as decimal point",
                "description": "Use comma as decimal point (uses a point, otherwise)",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "thousandSeparator": {
                "label": "Thousand separator",
                "description": "Use comma or point to separate digits",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "StringParser",
        "label": "Parse string",
        "description": "Parses string values, basically an identity function.",
        "categories": ["Parser"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "SkosTypeParser",
        "label": "Parse SKOS term",
        "description": "Parses values from a SKOS ontology.",
        "categories": ["Parser"],
        "parameterSpecification": {
            "surfaceFormToRepresentationMapping": {
                "label": "Surface form to representation mapping",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textArea",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "IsinParser",
        "label": "Parse ISIN",
        "description": "Parses International Securities Identification Numbers (ISIN) values and fails if the String is no valid ISIN.",
        "categories": ["Parser"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "htmlCleaner",
        "label": "Clean HTML",
        "description": " Cleans HTML using a tag white list and allows selection of HTML sections with xPath or cssSelector expressions.\n If the tag or attribute white lists are left empty default white lists will be used. The operator takes two inputs: the page HTML and\n (optional) the page Url which may be needed to resolve relative links in the page HTML.\n ",
        "categories": ["Normalize", "Parser", "Conversion"],
        "parameterSpecification": {
            "tagWhiteList": {
                "label": "Tag white list",
                "description": "Tags to keep in the cleaned Text (or reference to a configuration).",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "attributeWhiteList": {
                "label": "Attribute white list",
                "description": "Tags to keep in the cleaned Text (or reference to a configuration).",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "selectors": {
                "label": "Selectors",
                "description": "CSS or XPath queries for selection of content (or reference to a configuration). Comma separated. CssSelectors can be pipe separated for non-sequential execution.",
                "advanced": false,
                "required": true,
                "type": "textArea",
                "defaultValue": null
            },
            "method": {
                "label": "Method",
                "description": "Selects use of xPath or css selectors ('xPath' or 'cssSelectors').",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": false,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "xPath"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "excelMap",
        "label": "Excel map",
        "description": "Replaces values based on a map of values read from a file in Open XML format (XLSX).\nThe XLSX file may contain several sheets of the form:\n\nmapFrom,mapTo\n<source string>,<target string>\n... and more\n\nAn empty string can be created in Excel and alternatives by inserting =\"\" in the input line of a cell.\n\nIf there are multiple values for a single key, all values will be returned for the given key.\n\nNote that the mapping table will be cached in memory. If the Excel file is updated (even while transforming), the map will be reloaded within seconds.\n    ",
        "categories": ["Replace"],
        "parameterSpecification": {
            "excelFile": {
                "label": "Excel file",
                "description": "Excel file inside the resources directory containing one or more sheets with mapping tables.",
                "advanced": false,
                "required": true,
                "type": "resource",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": false,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": null
            },
            "sheetName": {
                "label": "Sheet name",
                "description": "The sheet that contains the mapping table or empty if the first sheet should be taken.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "skipLines": {
                "label": "Skip lines",
                "description": "How many rows to skip before reading the mapping table. By default the expected header row is skipped.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "1"
            },
            "strict": {
                "label": "Strict",
                "description": "If set to true the operator throws validation errors for values it cannot map. If set to false it will output them unchanged.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            },
            "conflictStrategy": {
                "label": "Conflict strategy",
                "description": "The strategy how to cope with map conflicts when in strict-mode. Current strategies are to retain the values and to remove them.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "retain"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SEARCH",
        "label": "Search",
        "description": "Excel SEARCH(find_text; text; position): Returns the position of a text segment within a character string. The start of the search can be set as an option. The search text can be a number or any sequence of characters. The search is not case-sensitive. The search supports regular expressions. Find_text is the text to be searched for. Text is the text where the search will take place. Position (optional) is the position in the text where the search is to start.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SEARCH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_CEILING",
        "label": "Ceiling",
        "description": "Excel CEILING(number; significance; mode): Rounds the given number to the nearest integer or multiple of significance. Significance is the value to whose multiple of ten the value is to be rounded up (.01, .1, 1, 10, etc.). Mode is an optional value. If it is indicated and non-zero and if the number and significance are negative, rounding up is carried out based on that value.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "CEILING"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_RATE",
        "label": "Rate",
        "description": "Excel RATE(NPER; PMT; PV; FV; type; guess): Returns the constant interest rate per period of an annuity. NPER is the total number of periods, during which payments are made (payment period). PMT is the constant payment (annuity) paid during each period. PV is the cash value in the sequence of payments. FV (optional) is the future value, which is reached at the end of the periodic payments. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period. Guess (optional) determines the estimated value of the interest with iterative calculation.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "RATE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ACOSH",
        "label": "Acosh",
        "description": "Excel ACOSH(number): Returns the inverse hyperbolic cosine of the given number in radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ACOSH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PMT",
        "label": "Pmt",
        "description": "Excel PMT(rate; NPER; PV; FV; type): Returns the periodic payment for an annuity with constant interest rates. Rate is the periodic interest rate. NPER is the number of periods in which annuity is paid. PV is the present value (cash value) in a sequence of payments. FV (optional) is the desired value (future value) to be reached at the end of the periodic payments. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PMT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PERCENTILE",
        "label": "Percentile",
        "description": "Excel PERCENTILE(data; alpha): Returns the alpha-percentile of data values in an array. Data is the array of data. Alpha is the percentage of the scale between 0 and 1.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PERCENTILE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_CHOOSE",
        "label": "Choose",
        "description": "Excel CHOOSE(index; value1; ... value30): Uses an index to return a value from a list of up to 30 values. Index is a reference or number between 1 and 30 indicating which value is to be taken from the list. Value1; ... value30 is the list of values entered as a reference to a cell or as individual values.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "CHOOSE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_LN",
        "label": "Ln",
        "description": "Excel LN(number): Returns the natural logarithm based on the constant e of the given number.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "LN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_EXP",
        "label": "Exp",
        "description": "Excel EXP(number): Returns e raised to the power of the given number.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "EXP"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_EXACT",
        "label": "Exact",
        "description": "Excel EXACT(text_1; text_2): Compares two text strings and returns TRUE if they are identical. This function is case- sensitive. Text_1 is the first text to compare. Text_2 is the second text to compare.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "EXACT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MINA",
        "label": "Mina",
        "description": "Excel MINA(value_1; value_2; ... value_30): Returns the minimum value in a list of arguments. Here text can also be entered. The value of the text is 0. Value_1; value_2; ... value_30 are values or ranges.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MINA"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_OR",
        "label": "Or",
        "description": "Excel OR(logical_value_1; logical_value_2; ...logical_value_30): Returns TRUE if at least one argument is TRUE. Returns the value FALSE if all the arguments have the logical value FALSE. Logical_value_1; logical_value_2; ...logical_value_30 are conditions to be checked. All conditions can be either TRUE or FALSE. If a range is entered as a parameter, the function uses the value from the range that is in the current column or row.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "OR"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_COSH",
        "label": "Cosh",
        "description": "Excel COSH(number): Returns the hyperbolic cosine of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "COSH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SINH",
        "label": "Sinh",
        "description": "Excel SINH(number): Returns the hyperbolic sine of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SINH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_TRUE",
        "label": "True",
        "description": "Excel TRUE(): Sets the logical value to TRUE. The TRUE() function does not require any arguments.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "TRUE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUMXMY2",
        "label": "Sumxmy2",
        "description": "Excel SUMXMY2(array_X; array_Y): Adds the squares of the variance between corresponding values in two arrays. Array_X is the first array whose elements are to be subtracted and squared. Array_Y is the second array, whose elements are to be subtracted and squared.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUMXMY2"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUM",
        "label": "Sum",
        "description": "Excel SUM(number_1; number_2; ... number_30): Adds all the numbers in a range of cells. Number_1; number_2;... number_30 are up to 30 arguments whose sum is to be calculated. You can also enter a range using cell references.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUM"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_NOT",
        "label": "Not",
        "description": "Excel NOT(logical_value): Reverses the logical value. Logical_value is any value to be reversed.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "NOT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ACOS",
        "label": "Acos",
        "description": "Excel ACOS(number): Returns the inverse cosine of the given number in radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ACOS"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_LARGE",
        "label": "Large",
        "description": "Excel LARGE(data; rank_c): Returns the Rank_c-th largest value in a data set. Data is the cell range of data. Rank_c is the ranking of the value (2nd largest, 3rd largest, etc.) written as an integer.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "LARGE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_CODE",
        "label": "Code",
        "description": "Excel CODE(text): Returns a numeric code for the first character in a text string. Text is the text for which the code of the first character is to be found.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "CODE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_TAN",
        "label": "Tan",
        "description": "Excel TAN(number): Returns the tangent of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "TAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_GEOMEAN",
        "label": "Geomean",
        "description": "Excel GEOMEAN(number_1; number_2; ... number_30): Returns the geometric mean of a sample. Number_1; number_2; ... number_30 are numerical arguments or ranges that represent a random sample.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "GEOMEAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_LEFT",
        "label": "Left",
        "description": "Excel LEFT(text; number): Returns the first character or characters in a text string. Text is the text where the initial partial words are to be determined. Number (optional) is the number of characters for the start text. If this parameter is not defined, one character is returned.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "LEFT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MOD",
        "label": "Mod",
        "description": "Excel MOD(dividend; divisor): Returns the remainder after a number is divided by a divisor. Dividend is the number which will be divided by the divisor. Divisor is the number by which to divide the dividend.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MOD"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MID",
        "label": "Mid",
        "description": "Excel MID(text; start; number): Returns a text segment of a character string. The parameters specify the starting position and the number of characters. Text is the text containing the characters to extract. Start is the position of the first character in the text to extract. Number is the number of characters in the part of the text.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MID"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SQRT",
        "label": "Sqrt",
        "description": "Excel SQRT(number): Returns the positive square root of the given number. The value of the number must be positive.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SQRT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ATAN",
        "label": "Atan",
        "description": "Excel ATAN(number): Returns the inverse tangent of the given number in radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ATAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ATAN2",
        "label": "Atan2",
        "description": "Excel ATAN2(number_x; number_y): Returns the inverse tangent of the specified x and y coordinates. Number_x is the value for the x coordinate. Number_y is the value for the y coordinate.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ATAN2"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUMPRODUCT",
        "label": "Sumproduct",
        "description": "Excel SUMPRODUCT(array 1; array 2; ...array 30): Multiplies corresponding elements in the given arrays, and returns the sum of those products. Array 1; array 2;...array 30 are arrays whose corresponding elements are to be multiplied. At least one array must be part of the argument list. If only one array is given, all array elements are summed.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUMPRODUCT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MIN",
        "label": "Min",
        "description": "Excel MIN(number_1; number_2; ... number_30): Returns the minimum value in a list of arguments. Number_1; number_2; ... number_30 are numerical values or ranges.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MIN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PRODUCT",
        "label": "Product",
        "description": "Excel PRODUCT(number 1 to 30): Multiplies all the numbers given as arguments and returns the product. Number 1 to number 30 are up to 30 arguments whose product is to be calculated, separated by semi-colons.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PRODUCT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SIGN",
        "label": "Sign",
        "description": "Excel SIGN(number): Returns the sign of the given number. The function returns the result 1 for a positive sign,  1 for a negative sign, and 0 for zero.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SIGN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_COS",
        "label": "Cos",
        "description": "Excel COS(number): Returns the cosine of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "COS"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PV",
        "label": "Pv",
        "description": "Excel PV(rate; NPER; PMT; FV; type): Returns the present value of an investment resulting from a series of regular payments. Rate defines the interest rate per period. NPER is the total number of payment periods. PMT is the regular payment made per period. FV (optional) defines the future value remaining after the final installment has been made. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PV"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_REPLACE",
        "label": "Replace",
        "description": "Excel REPLACE(text; position; length; new_text): Replaces part of a text string with a different text string. This function can be used to replace both characters and numbers (which are automatically converted to text). The result of the function is always displayed as text. To perform further calculations with a number which has been replaced by text, convert it back to a number using the VALUE function. Any text containing numbers must be enclosed in quotation marks so it is not interpreted as a number and automatically converted to text. Text is text of which a part will be replaced. Position is the position within the text where the replacement will begin. Length is the number of characters in text to be replaced. New_text is the text which replaces text..",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "REPLACE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_RANK",
        "label": "Rank",
        "description": "Excel RANK(value; data; type): Returns the rank of the given Value in a sample. Data is the array or range of data in the sample. Type (optional) is the sequence order, either ascending (0) or descending (1).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "RANK"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_TANH",
        "label": "Tanh",
        "description": "Excel TANH(number): Returns the hyperbolic tangent of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "TANH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MIRR",
        "label": "Mirr",
        "description": "Excel MIRR(values; investment; reinvest_rate): Calculates the modified internal rate of return of a series of investments. Values corresponds to the array or the cell reference for cells whose content corresponds to the payments. Investment is the rate of interest of the investments (the negative values of the array) Reinvest_rate is the rate of interest of the reinvestment (the positive values of the array).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MIRR"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MODE",
        "label": "Mode",
        "description": "Excel MODE(number_1; number_2; ... number_30): Returns the most common value in a data set. Number_1; number_2; ... number_30 are numerical values or ranges. If several values have the same frequency, it returns the smallest value. An error occurs when a value does not appear twice.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MODE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUMX2PY2",
        "label": "Sumx2py2",
        "description": "Excel SUMX2PY2(array_X; array_Y): Returns the sum of the sum of squares of corresponding values in two arrays. Array_X is the first array whose arguments are to be squared and added. Array_Y is the second array, whose elements are to be added and squared.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUMX2PY2"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SMALL",
        "label": "Small",
        "description": "Excel SMALL(data; rank_c): Returns the Rank_c-th smallest value in a data set. Data is the cell range of data. Rank_c is the rank of the value (2nd smallest, 3rd smallest, etc.) written as an integer.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SMALL"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_STDEV",
        "label": "Stdev",
        "description": "Excel STDEV(number_1; number_2; ... number_30): Estimates the standard deviation based on a sample. Number_1; number_2; ... number_30 are numerical values or ranges representing a sample based on an entire population.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "STDEV"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_FALSE",
        "label": "False",
        "description": "Excel FALSE(): Set the logical value to FALSE. The FALSE() function does not require any arguments.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "FALSE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PPMT",
        "label": "Ppmt",
        "description": "Excel PPMT(rate; period; NPER; PV; FV; type): Returns for a given period the payment on the principal for an investment that is based on periodic and constant payments and a constant interest rate. Rate is the periodic interest rate. Period is the amortization period. NPER is the total number of periods during which annuity is paid. PV is the present value in the sequence of payments. FV (optional) is the desired (future) value. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PPMT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_FACT",
        "label": "Fact",
        "description": "Excel FACT(number): Returns the factorial of the given number.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "FACT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_NPV",
        "label": "Npv",
        "description": "Excel NPV(Rate; value_1; value_2; ... value_30): Returns the net present value of an investment based on a series of periodic cash flows and a discount rate. Rate is the discount rate for a period. Value_1; value_2;... value_30 are values representing deposits or withdrawals.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "NPV"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_COMBIN",
        "label": "Combin",
        "description": "Excel COMBIN(count_1; count_2): Returns the number of combinations for a given number of objects. Count_1 is the total number of elements. Count_2 is the selected count from the elements. This is the same as the nCr function on a calculator.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "COMBIN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ROUND",
        "label": "Round",
        "description": "Excel ROUND(number; count): Rounds the given number to a certain number of decimal places according to valid mathematical criteria. Count (optional) is the number of the places to which the value is to be rounded. If the count parameter is negative, only the whole number portion is rounded. It is rounded to the place indicated by the count.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ROUND"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_COUNT",
        "label": "Count",
        "description": "Excel COUNT(value_1; value_2; ... value_30): Counts how many numbers are in the list of arguments. Text entries are ignored. Value_1; value_2; ... value_30 are values or ranges which are to be counted.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "COUNT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_INTERCEPT",
        "label": "Intercept",
        "description": "Excel INTERCEPT(data_Y; data_X): Calculates the y-value at which a line will intersect the y-axis by using known x-values and y-values. Data_Y is the dependent set of observations or data. Data_X is the independent set of observations or data. Names, arrays or references containing numbers must be used here. Numbers can also be entered directly.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "INTERCEPT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_DEVSQ",
        "label": "Devsq",
        "description": "Excel DEVSQ(number_1; number_2; ... number_30): Returns the sum of squares of deviations based on a sample mean. Number_1; number_2; ... number_30 are numerical values or ranges representing a sample.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "DEVSQ"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ROMAN",
        "label": "Roman",
        "description": "Excel ROMAN(number; mode): Converts a number into a Roman numeral. The value range must be between 0 and 3999; the modes can be integers from 0 to 4. Number is the number that is to be converted into a Roman numeral. Mode (optional) indicates the degree of simplification. The higher the value, the greater is the simplification of the Roman numeral.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ROMAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PI",
        "label": "Pi",
        "description": "Excel PI(): Returns the value of PI to fourteen decimal places.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PI"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_INT",
        "label": "Int",
        "description": "Excel INT(number): Rounds the given number down to the nearest integer.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "INT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUMSQ",
        "label": "Sumsq",
        "description": "Excel SUMSQ(number_1; number_2; ... number_30): Calculates the sum of the squares of numbers (totaling up of the squares of the arguments) Number_1; number_2;... number_30 are up to 30 arguments, the sum of whose squares is to be calculated.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUMSQ"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_IF",
        "label": "If",
        "description": "Excel IF(test; then_value; otherwise_value): Returns different values based on the test value. Note that in this implementation it will not actually evaluate logical conditions. Then_value is the value that is returned if the test is TRUE. Otherwise_value (optional) is the value that is returned if the test is FALSE.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "IF"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_FV",
        "label": "Fv",
        "description": "Excel FV(rate; NPER; PMT; PV; type): Returns the future value of an investment based on periodic, constant payments and a constant interest rate. Rate is the periodic interest rate. NPER is the total number of periods. PMT is the annuity paid regularly per period. PV (optional) is the present cash value of an investment. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "FV"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_DEGREES",
        "label": "Degrees",
        "description": "Excel DEGREES(number): Converts the given number in radians to degrees.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "DEGREES"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_IPMT",
        "label": "Ipmt",
        "description": "Excel IPMT(rate; period; NPER; PV; FV; type): Calculates the periodic amortization for an investment with regular payments and a constant interest rate. Rate is the periodic interest rate. Period is the period for which the compound interest is calculated. NPER is the total number of periods during which annuity is paid. Period=NPER, if compound interest for the last period is calculated. PV is the present cash value in sequence of payments. FV (optional) is the desired value (future value) at the end of the periods. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "IPMT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_POISSON",
        "label": "Poisson",
        "description": "Excel POISSON(number; mean; C): Returns the Poisson distribution for the given Number. Mean is the middle value of the Poisson distribution. C = 0 calculates the density function, and C = 1 calculates the distribution.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "POISSON"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SIN",
        "label": "Sin",
        "description": "Excel SIN(number): Returns the sine of the given number (angle in radians).",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SIN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_FIND",
        "label": "Find",
        "description": "Excel FIND(find_text; text; position): Looks for a string of text within another string. Where to begin the search can also be defined. The search term can be a number or any string of characters. The search is case-sensitive. Find_text is the text to be found. Text is the text where the search takes place. Position (optional) is the position in the text from which the search starts.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "FIND"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_POWER",
        "label": "Power",
        "description": "Excel POWER(base; power): Returns the result of a number raised to a power. Base is the number that is to be raised to the given power. Power is the exponent by which the base is to be raised.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "POWER"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_RADIANS",
        "label": "Radians",
        "description": "Excel RADIANS(number): Converts the given number in degrees to radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "RADIANS"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_AVERAGE",
        "label": "Average",
        "description": "Excel AVERAGE(number_1; number_2; ... number_30): Returns the average of the arguments. Number_1; number_2; ... number_30 are numerical values or ranges. Text is ignored.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "AVERAGE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_REPT",
        "label": "Rept",
        "description": "Excel REPT(text; number): Repeats a character string by the given number of copies. Text is the text to be repeated. Number is the number of repetitions. The result can be a maximum of 255 characters.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "REPT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_RIGHT",
        "label": "Right",
        "description": "Excel RIGHT(text; number): Defines the last character or characters in a text string. Text is the text of which the right part is to be determined. Number (optional) is the number of characters from the right part of the text.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "RIGHT"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ROUNDDOWN",
        "label": "Rounddown",
        "description": "Excel ROUNDDOWN(number; count): Rounds the given number. Count (optional) is the number of digits to be rounded down to. If the count parameter is negative, only the whole number portion is rounded. It is rounded to the place indicated by the count.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ROUNDDOWN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_CLEAN",
        "label": "Clean",
        "description": "Excel CLEAN(text): Removes all non-printing characters from the string. Text refers to the text from which to remove all non-printable characters.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "CLEAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_LOG10",
        "label": "Log10",
        "description": "Excel LOG10(number): Returns the base-10 logarithm of the given number.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "LOG10"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_VARP",
        "label": "Varp",
        "description": "Excel VARP(Number_1; number_2; ... number_30): Calculates a variance based on the entire population. Number_1; number_2; ... number_30 are numerical values or ranges representing an entire population.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "VARP"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MAXA",
        "label": "Maxa",
        "description": "Excel MAXA(value_1; value_2; ... value_30): Returns the maximum value in a list of arguments. Unlike MAX, text can be entered. The value of the text is 0. Value_1; value_2; ... value_30 are values or ranges.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MAXA"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ABS",
        "label": "Abs",
        "description": "Excel ABS(number): Returns the absolute value of the given number.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ABS"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SLOPE",
        "label": "Slope",
        "description": "Excel SLOPE(data_Y; data_X): Returns the slope of the linear regression line. Data_Y is the array or matrix of Y data. Data_X is the array or matrix of X data.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SLOPE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_LOG",
        "label": "Log",
        "description": "Excel LOG(number; base): Returns the logarithm of the given number to the specified base. Base is the base for the logarithm calculation.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "LOG"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ASIN",
        "label": "Asin",
        "description": "Excel ASIN(number): Returns the inverse sine of the given number in radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ASIN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MEDIAN",
        "label": "Median",
        "description": "Excel MEDIAN(number_1; number_2; ... number_30): Returns the median of a set of numbers. Number_1; number_2; ... number_30 are values or ranges, which represent a sample. Each number can also be replaced by a reference.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MEDIAN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_FLOOR",
        "label": "Floor",
        "description": "Excel FLOOR(number; significance; mode): Rounds the given number down to the nearest multiple of significance. Significance is the value to whose multiple of ten the number is to be rounded down (.01, .1, 1, 10, etc.). Mode is an optional value. If it is indicated and non-zero and if the number and significance are negative, rounding up is carried out based on that value.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "FLOOR"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_NPER",
        "label": "Nper",
        "description": "Excel NPER(rate; PMT; PV; FV; type): Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate. Rate is the periodic interest rate. PMT is the constant annuity paid in each period. PV is the present value (cash value) in a sequence of payments. FV (optional) is the future value, which is reached at the end of the last period. Type (optional) defines whether the payment is due at the beginning (1) or the end (0) of a period.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "NPER"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUBSTITUTE",
        "label": "Substitute",
        "description": "Excel SUBSTITUTE(text; search_text; new text; occurrence): Substitutes new text for old text in a string. Text is the text in which text segments are to be exchanged. Search_text is the text segment that is to be replaced (a number of times). New text is the text that is to replace the text segment. Occurrence (optional) indicates how many occurrences of the search text are to be replaced. If this parameter is missing, the search text is replaced throughout.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUBSTITUTE"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_EVEN",
        "label": "Even",
        "description": "Excel EVEN(number): Rounds the given number up to the nearest even integer.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "EVEN"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_AND",
        "label": "And",
        "description": "Excel AND(argument1; argument2 ...argument30): Returns TRUE if all the arguments are considered TRUE, and FALSE otherwise. ",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "AND"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_MAX",
        "label": "Max",
        "description": "Excel MAX(number_1; number_2; ... number_30): Returns the maximum value in a list of arguments. Number_1; number_2; ... number_30 are numerical values or ranges.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "MAX"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_SUMX2MY2",
        "label": "Sumx2my2",
        "description": "Excel SUMX2MY2(array_X; array_Y): Returns the sum of the difference of squares of corresponding values in two arrays. Array_X is the first array whose elements are to be squared and added. Array_Y is the second array whose elements are to be squared and subtracted.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "SUMX2MY2"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_AVEDEV",
        "label": "Avedev",
        "description": "Excel AVEDEV(number1; number2; ... number_30): Returns the average of the absolute deviations of data points from their mean. Displays the diffusion in a data set. Number_1; number_2; ... number_30 are values or ranges that represent a sample. Each number can also be replaced by a reference.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "AVEDEV"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_RAND",
        "label": "Rand",
        "description": "Excel RAND(): Returns a random number between 0 and 1.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "RAND"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ASINH",
        "label": "Asinh",
        "description": "Excel ASINH(number): Returns the inverse hyperbolic sine of the given number in radians.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ASINH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ODD",
        "label": "Odd",
        "description": "Excel ODD(number): Rounds the given number up to the nearest odd integer.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ODD"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_PROPER",
        "label": "Proper",
        "description": "Excel PROPER(text): Capitalizes the first letter in all words of a text string. Text is the text to be converted.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "PROPER"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ATANH",
        "label": "Atanh",
        "description": "Excel ATANH(number): Returns the inverse hyperbolic tangent of the given number. (Angle is returned in radians.)",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ATANH"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_ROUNDUP",
        "label": "Roundup",
        "description": "Excel ROUNDUP(number; count): Rounds the given number up. Count (optional) is the number of digits to which rounding up is to be done. If the count parameter is negative, only the whole number portion is rounded. It is rounded to the place indicated by the count.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ROUNDUP"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_VAR",
        "label": "Var",
        "description": "Excel VAR(number_1; number_2; ... number_30): Estimates the variance based on a sample. Number_1; number_2; ... number_30 are numerical values or ranges representing a sample based on an entire population.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "VAR"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_IRR",
        "label": "Irr",
        "description": "Excel IRR(values; guess): Calculates the internal rate of return for an investment. The values represent cash flow values at regular intervals; at least one value must be negative (payments), and at least one value must be positive (income). Values is an array containing the values. Guess (optional) is the estimated value. If you can provide only a few values, you should provide an initial guess to enable the iteration.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "IRR"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_TRUNC",
        "label": "Trunc",
        "description": "Excel TRUNC(number; count): Truncates a number to an integer by removing the fractional part of the number according to the precision specified in Tools > Options > OpenOffice.org Calc > Calculate. Number is the number whose decimal places are to be cut off. Count is the number of decimal places which are not cut off.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "TRUNC"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "Excel_COUNTA",
        "label": "Counta",
        "description": "Excel COUNTA(value_1; value_2; ... value_30): Counts how many values are in the list of arguments. Text entries are also counted, even when they contain an empty string of length 0. If an argument is an array or reference, empty cells within the array or reference are ignored. value_1; value_2; ... value_30 are up to 30 arguments representing the values to be counted.",
        "categories": ["Excel"],
        "parameterSpecification": {
            "functionName": {
                "label": "Function name",
                "description": "The name of the Excel function",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "COUNTA"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeDuplicates",
        "label": "Remove duplicates",
        "description": "Removes duplicated values, making a value sequence distinct.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "replace",
        "label": "Replace",
        "description": "Replace all occurrences of a string \"search\" with \"replace\" in a string.",
        "categories": ["Replace"],
        "parameterSpecification": {
            "search": {
                "label": "Search",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "replace": {
                "label": "Replace",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "regexReplace",
        "label": "Regex replace",
        "description": "Replace all occurrences of a regex \"regex\" with \"replace\" in a string.",
        "categories": ["Replace"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "replace": {
                "label": "Replace",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "regexExtract",
        "label": "Regex extract",
        "description": "Extracts occurrences of a regex \"regex\" in a string. If there is at least one capture group, it will return the string of the first capture group instead.",
        "categories": ["Extract"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "Regular expression",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "extractAll": {
                "label": "Extract all",
                "description": "If true, all matches are extracted. If false, only the first match is extracted.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "map",
        "label": "Map",
        "description": "Replaces values based on a map of values.",
        "categories": ["Replace"],
        "parameterSpecification": {
            "map": {
                "label": "Map",
                "description": "A map of values",
                "advanced": false,
                "required": true,
                "type": "textArea",
                "defaultValue": null
            },
            "default": {
                "label": "Default",
                "description": "Default if the map defines no value",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "mapWithDefaultInput",
        "label": "Map with default",
        "description": "\nTakes two inputs.\nTries to map the first input based on the map of values parameter config.\nIf the input value is not found in the map, it takes the value of the second input.\nThe indexes of the mapped value and the default value match. If there are less default values than\nvalues to map, the last default value is replicated to match the count.\n      ",
        "categories": ["Replace"],
        "parameterSpecification": {
            "map": {
                "label": "Map",
                "description": "A map of values",
                "advanced": false,
                "required": true,
                "type": "textArea",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "concat",
        "label": "Concatenate",
        "description": "Concatenates strings from multiple inputs.",
        "categories": ["Combine"],
        "parameterSpecification": {
            "glue": {
                "label": "Glue",
                "description": "Separator to be inserted between two concatenated strings.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "missingValuesAsEmptyStrings": {
                "label": "Missing values as empty strings",
                "description": "Handle missing values as empty strings.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeBlanks",
        "label": "Remove blanks",
        "description": "Remove whitespace from a string.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "lowerCase",
        "label": "Lower case",
        "description": "Converts a string to lower case.",
        "categories": ["Normalize", "Recommended"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "upperCase",
        "label": "Upper case",
        "description": "Converts a string to upper case.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "capitalize",
        "label": "Capitalize",
        "description": "Capitalizes the string i.e. converts the first character to upper case. If 'allWords' is set to true, all words are capitalized and not only the first character.",
        "categories": ["Normalize"],
        "parameterSpecification": {
            "allWords": {
                "label": "All words",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "urlEncode",
        "label": "Encode URL",
        "description": "URL encodes the string.",
        "categories": ["Normalize"],
        "parameterSpecification": {
            "encoding": {
                "label": "Encoding",
                "description": "The character encoding.",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "UTF-8"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "stem",
        "label": "Stem",
        "description": "Stems a string using the Porter Stemmer.",
        "categories": ["Linguistic"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "stripPrefix",
        "label": "Strip prefix",
        "description": "Strips a prefix of a string.",
        "categories": ["Substring"],
        "parameterSpecification": {
            "prefix": {
                "label": "Prefix",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "stripPostfix",
        "label": "Strip postfix",
        "description": "Strips a postfix of a string.",
        "categories": ["Substring"],
        "parameterSpecification": {
            "postfix": {
                "label": "Postfix",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "stripUriPrefix",
        "label": "Strip URI prefix",
        "description": "Strips the URI prefix and decodes the remainder. Leaves values unchanged which are not a valid URI.",
        "categories": ["Substring", "Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "uriFix",
        "label": "Fix URI",
        "description": "Generates valid absolute URIs from the given values. Already valid absolute URIs are left untouched.",
        "categories": ["Normalize"],
        "parameterSpecification": {
            "uriPrefix": {
                "label": "Uri prefix",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "urn:url-encoded-value:"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "alphaReduce",
        "label": "Strip non-alphabetic characters",
        "description": "Strips all non-alphabetic characters from a string. Spaces are retained.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeSpecialChars",
        "label": "Remove special chars",
        "description": "Remove special characters (including punctuation) from a string.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "convertCharset",
        "label": "Convert charset",
        "description": "Convert the string from \"sourceCharset\" to \"targetCharset\".",
        "categories": ["Conversion"],
        "parameterSpecification": {
            "sourceCharset": {
                "label": "Source charset",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "ISO-8859-1"
            },
            "targetCharset": {
                "label": "Target charset",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "UTF-8"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeValues",
        "label": "Remove values",
        "description": "Removes values that contain words from a blacklist. The blacklist values are separated with commas.",
        "categories": ["Filter"],
        "parameterSpecification": {
            "blacklist": {
                "label": "Blacklist",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeRemoteStopwords",
        "label": "Remove stopwords (remote stopword list)",
        "description": "Removes stopwords from all values. The stopword list is retrieved via a http connection (e.g. https://sites.google.com/site/kevinbouge/stopwords-lists/stopwords_de.txt). Each line in the stopword list contains a stopword. The separator defines a regex that is used for detecting words.",
        "categories": ["Filter"],
        "parameterSpecification": {
            "stopWordListUrl": {
                "label": "Stop word list url",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "separator": {
                "label": "Separator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "[\\s-]+"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeEmptyValues",
        "label": "Remove empty values",
        "description": "Removes empty values.",
        "categories": ["Filter"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "removeParentheses",
        "label": "Remove parentheses",
        "description": "Remove all parentheses including their content, e.g., transforms 'Berlin (City)' -> 'Berlin'.",
        "categories": ["Normalize"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "trim",
        "label": "Trim",
        "description": "Remove leading and trailing whitespaces.",
        "categories": ["Normalize", "Substring"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "tokenize",
        "label": "Tokenize",
        "description": "Tokenizes all input values.",
        "categories": ["Tokenization", "Recommended"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "The regular expression used to split values.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "\\s"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "concatMultiValues",
        "label": "Concatenate multiple values",
        "description": "Concatenates multiple values received for an input. If applied to multiple inputs, yields at most one value per input. Optionally removes duplicate values.",
        "categories": ["Combine"],
        "parameterSpecification": {
            "glue": {
                "label": "Glue",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "removeDuplicates": {
                "label": "Remove duplicates",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "merge",
        "label": "Merge",
        "description": "Merges the values of all inputs.",
        "categories": ["Combine"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "camelcasetokenizer",
        "label": "Camel case tokenizer",
        "description": "Tokenizes a camel case string. That is it splits strings between a lower case characted and an upper case character.",
        "categories": ["Tokenization"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "normalizeChars",
        "label": "Normalize chars",
        "description": "Replaces diacritical characters with non-diacritical ones (eg, ö -> o), plus some specialities like transforming æ -> ae, ß -> ss.",
        "categories": ["Linguistic"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "filterByLength",
        "label": "Filter by length",
        "description": "Removes all strings that are shorter than 'min' characters and longer than 'max' characters.",
        "categories": ["Filter"],
        "parameterSpecification": {
            "min": {
                "label": "Min",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "0"
            },
            "max": {
                "label": "Max",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "2147483647"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "filterByRegex",
        "label": "Filter by regex",
        "description": "Removes all strings that do NOT match a regex. If 'negate' is true, only strings will be removed that match the regex.",
        "categories": ["Filter"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "negate": {
                "label": "Negate",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "untilCharacter",
        "label": "Until character",
        "description": "Extracts the substring until the character given.",
        "categories": ["Substring"],
        "parameterSpecification": {
            "untilCharacter": {
                "label": "Until character",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "substring",
        "label": "Substring",
        "description": "Returns a substring between 'beginIndex' (inclusive) and 'endIndex' (exclusive).\nIf 'endIndex' is 0 (default), it is ignored and the entire remaining string starting with 'beginIndex' is returned.\nIf 'endIndex' is negative, -endIndex characters are removed from the end.",
        "categories": ["Substring"],
        "parameterSpecification": {
            "beginIndex": {
                "label": "Begin index",
                "description": "The beginning index, inclusive.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "0"
            },
            "endIndex": {
                "label": "End index",
                "description": "The end index, exclusive. Ignored if set to 0, i.e., the entire remaining string starting with 'beginIndex' is returned. If negative, -endIndex characters are removed from the end ",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "0"
            },
            "stringMustBeInRange": {
                "label": "String must be in range",
                "description": "If true, only strings will be accepted that are within the start and end indices, throwing a validating error if an index is out of range.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "soundex",
        "label": "Soundex",
        "description": "Soundex algorithm. Provided by the StringMetric library: http://rockymadden.com/stringmetric/.",
        "categories": ["Linguistic"],
        "parameterSpecification": {
            "refined": {
                "label": "Refined",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "NYSIIS",
        "label": "NYSIIS",
        "description": "NYSIIS phonetic encoding. Provided by the StringMetric library: http://rockymadden.com/stringmetric/.",
        "categories": ["Linguistic"],
        "parameterSpecification": {
            "refined": {
                "label": "Refined",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "metaphone",
        "label": "Metaphone",
        "description": "Metaphone phonetic encoding. Provided by the StringMetric library: http://rockymadden.com/stringmetric/.",
        "categories": ["Linguistic"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "constant",
        "label": "Constant",
        "description": "Generates a constant value.",
        "categories": ["Value", "Recommended"],
        "parameterSpecification": {
            "value": {
                "label": "Value",
                "description": "The constant value to be generated",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "constantUri",
        "label": "Constant URI",
        "description": "Generates a constant URI.",
        "categories": ["Value"],
        "parameterSpecification": {
            "value": {
                "label": "Value",
                "description": "The constant URI to be generated",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "<owl:Class>"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "randomNumber",
        "label": "Random number",
        "description": "Generates a set of random numbers.",
        "categories": ["Value"],
        "parameterSpecification": {
            "min": {
                "label": "Min",
                "description": "The smallest number that could be generated.",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "0.0"
            },
            "max": {
                "label": "Max",
                "description": "The largest number that could be generated.",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "100.0"
            },
            "minCount": {
                "label": "Min count",
                "description": "The minimum number of values to generate in each set.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "1"
            },
            "maxCount": {
                "label": "Max count",
                "description": "The maximum number of values to generate in each set.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "1"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "emptyValue",
        "label": "Empty value",
        "description": "Generates an empty value.",
        "categories": ["Value"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "uuid",
        "label": "UUID",
        "description": " Generates UUIDs.\nIf no input value is provided, a random UUID (type 4) is generated using a cryptographically strong pseudo random number generator.\nIf input values are provided, a name-based UUID (type 3) is generated for each input value.\nEach input value will generate a separate UUID. For building a UUID from multiple inputs, the Concatenate operator can be used.\n",
        "categories": ["Value"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "defaultValue",
        "label": "Default Value",
        "description": "Generates a default value, if the input values are empty. Forwards any non-empty values.",
        "categories": ["Value", "Recommended"],
        "parameterSpecification": {
            "value": {
                "label": "Value",
                "description": "The default value to be generated, if input values are empty",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "default"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "ifContains",
        "label": "If contains",
        "description": "Accepts two or three inputs. If the first input contains the given value, the second input is forwarded. Otherwise, the third input is forwarded (if present).",
        "categories": ["Conditional"],
        "parameterSpecification": {
            "search": {
                "label": "Search",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "ifExists",
        "label": "If exists",
        "description": "Accepts two or three inputs. If the first input provides a value, the second input is forwarded. Otherwise, the third input is forwarded (if present).",
        "categories": ["Conditional"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "ifMatchesRegex",
        "label": "If matches regex",
        "description": "\n       Accepts two or three inputs.\n       If any value of the first input matches the regex, the second input is forwarded.\n       Otherwise, the third input is forwarded (if present).",
        "categories": ["Conditional"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "negate": {
                "label": "Negate",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "containsAllOf",
        "label": "Contains all of",
        "description": "Accepts two inputs. If the first input contains all of the second input values it returns 'true', else 'false' is returned.",
        "categories": ["Conditional"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "containsAnyOf",
        "label": "Contains any of",
        "description": "Accepts two inputs. If the first input contains any of the second input values it returns 'true', else 'false' is returned.",
        "categories": ["Conditional"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "negateTransformer",
        "label": "Negate binary (NOT)",
        "description": "Accepts one input, which is either 'true', '1' or 'false', '0' and negates it.",
        "categories": ["Conditional"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "numReduce",
        "label": "Numeric reduce",
        "description": "Strip all non-numeric characters from a string.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "keepPunctuation": {
                "label": "Keep punctuation",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "numOperation",
        "label": "Numeric operation",
        "description": " Applies a numeric operation to the values of multiple input operators.\n Uses double-precision floating-point numbers for computation.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "operator": {
                "label": "Operator",
                "description": "The operator to be applied to all values. One of '+', '-', '*', '/'",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "log",
        "label": "Logarithm",
        "description": "Transforms all numbers by applying the logarithm function. Non-numeric values are left unchanged.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "base": {
                "label": "Base",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "10"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "aggregateNumbers",
        "label": "Aggregate numbers",
        "description": "Aggregates all numbers in this set using a mathematical operation.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "operator": {
                "label": "Operator",
                "description": "One of '+', '*', 'min', 'max', 'average'.",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "compareNumbers",
        "label": "Compare numbers",
        "description": "Compares the numbers of two sets.\nReturns 1 if the comparison yields true and 0 otherwise.\nIf there are multiple numbers in both sets, the comparator must be true for all numbers.\nFor instance, {1,2} < {2,3} yields 0 as not all numbers in the first set are smaller than in the second.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "comparator": {
                "label": "Comparator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "<"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "count",
        "label": "Count values",
        "description": "Counts the number of values.",
        "categories": ["Sequence", "Numeric"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "extractPhysicalQuantity",
        "label": "Extract physical quantity",
        "description": "Extracts physical quantities, such as length or weight values.\nValues are expected of the form '{Number}{UnitPrefix}{Symbol}' and are converted to the base unit.\n\nExample:\n\n- Given a value '10km, 3mg'.\n- If the symbol parameter is set to 'm', the extracted value is 10000.\n- If the symbol parameter is set to 'g', the extracted value is 0.001.\n",
        "categories": ["Numeric", "Normalize"],
        "parameterSpecification": {
            "symbol": {
                "label": "Symbol",
                "description": "The symbol of the dimension, e.g., 'm' for meter.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "numberFormat": {
                "label": "Number format",
                "description": "The IETF BCP 47 language tag, e.g. 'en'.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "en"
            },
            "filter": {
                "label": "Filter",
                "description": "Only extracts from values that contain the given regex (case-insensitive).",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "index": {
                "label": "Index",
                "description": "If there are multiple matches, retrieve the value with the given index (zero-based).",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "0"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "formatNumber",
        "label": "Format number",
        "description": "\n  Formats a number according to a user-defined pattern.\n  The pattern syntax is documented at:\n  https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\n",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "pattern": {
                "label": "Pattern",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "locale": {
                "label": "Locale",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "en"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "timeToDate",
        "label": "Timestamp to date",
        "description": "Convert a timestamp to xsd:date format. Expects an integer that denotes the passed time since the Unix Epoch (1970-01-01)",
        "categories": ["Date"],
        "parameterSpecification": {
            "format": {
                "label": "Format",
                "description": "Custom output format (e.g., 'yyyy-MM-dd'). If left empty, a full xsd:dateTime (UTC) is returned.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "unit": {
                "label": "Unit",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "milliseconds"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "datetoTimestamp",
        "label": "Date to timestamp",
        "description": "Convert an xsd:dateTime to a timestamp. Returns the passed time since the Unix Epoch (1970-01-01).",
        "categories": ["Date"],
        "parameterSpecification": {
            "unit": {
                "label": "Unit",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "milliseconds"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "duration",
        "label": "Duration",
        "description": "Computes the time difference between two data times.",
        "categories": ["Date"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "durationInSeconds",
        "label": "Duration in seconds",
        "description": "Converts an xsd:duration to seconds.",
        "categories": ["Date"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "durationInDays",
        "label": "Duration in days",
        "description": "Converts an xsd:duration to days.",
        "categories": ["Date"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "durationInYears",
        "label": "Duration in years",
        "description": "Converts an xsd:duration to years.",
        "categories": ["Date"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "compareDates",
        "label": "Compare dates",
        "description": "Compares two dates.\nReturns 1 if the comparison yields true and 0 otherwise.\nIf there are multiple dates in both sets, the comparator must be true for all dates.\nFor instance, {2014-08-02,2014-08-03} < {2014-08-03} yields 0 as not all dates in the first set are smaller than in the second.",
        "categories": ["Date"],
        "parameterSpecification": {
            "comparator": {
                "label": "Comparator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "<"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "numberToDuration",
        "label": "Number to duration",
        "description": "Converts a number to an xsd:duration.",
        "categories": ["Date"],
        "parameterSpecification": {
            "unit": {
                "label": "Unit",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "day"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "parseDate",
        "label": "Parse date pattern",
        "description": "Parses a date based on a specified pattern, returning an xsd:date.",
        "categories": ["Date"],
        "parameterSpecification": {
            "format": {
                "label": "Format",
                "description": "The date pattern used to parse the input values",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "dd-MM-yyyy"
            },
            "lenient": {
                "label": "Lenient",
                "description": "If set to true, the parser tries to use heuristics to parse dates with invalid fields (such as a day of zero).",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "currentDate",
        "label": "Current date",
        "description": "Outputs the current date.",
        "categories": ["Date", "Value"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "validateDateRange",
        "label": "Validate date range",
        "description": "Validates if dates are within a specified range.",
        "categories": ["Validation", "Date"],
        "parameterSpecification": {
            "minDate": {
                "label": "Min date",
                "description": "Earliest allowed date in YYYY-MM-DD",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            },
            "maxDate": {
                "label": "Max date",
                "description": "Latest allowed data in YYYY-MM-DD",
                "advanced": false,
                "required": true,
                "type": "textField",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "validateNumericRange",
        "label": "Validate numeric range",
        "description": "Validates if a number is within a specified range.",
        "categories": ["Validation", "Date"],
        "parameterSpecification": {
            "min": {
                "label": "Min",
                "description": "Minimum allowed number",
                "advanced": false,
                "required": true,
                "type": "float",
                "defaultValue": null
            },
            "max": {
                "label": "Max",
                "description": "Maximum allowed number",
                "advanced": false,
                "required": true,
                "type": "float",
                "defaultValue": null
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "validateDateAfter",
        "label": "Validate date after",
        "description": "Validates if the first input date is after the second input date. Outputs the first input if the validation is successful.",
        "categories": ["Validation", "Date"],
        "parameterSpecification": {
            "allowEqual": {
                "label": "Allow equal",
                "description": "Allow both dates to be equal.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "validateRegex",
        "label": "Validate regex",
        "description": "Validates if all values match a regular expression.",
        "categories": ["Validation"],
        "parameterSpecification": {
            "regex": {
                "label": "Regex",
                "description": "regular expression",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "\\w*"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "validateNumberOfValues",
        "label": "Validate number of values",
        "description": "Validates that the number of values lies in a specified range.",
        "categories": ["Validation"],
        "parameterSpecification": {
            "min": {
                "label": "Min",
                "description": "Minimum allowed number of values",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "0"
            },
            "max": {
                "label": "Max",
                "description": "Maximum allowed number of values",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "1"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "getValueByIndex",
        "label": "Get value by index",
        "description": "Returns the value found at the specified index. Fails or returns an empty result depending on failIfNoFound is set or not.\n       Please be aware that this will work only if the data source supports some kind of ordering like XML or JSON. This\n       is probably not a good idea to do with RDF models.\n\n       If emptyStringToEmptyResult is true then instead of a result with an empty String, an empty result is returned.\n    ",
        "categories": ["Sequence"],
        "parameterSpecification": {
            "index": {
                "label": "Index",
                "description": "No description",
                "advanced": false,
                "required": true,
                "type": "int",
                "defaultValue": null
            },
            "failIfNotFound": {
                "label": "Fail if not found",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "emptyStringToEmptyResult": {
                "label": "Empty string to empty result",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "toSequenceIndex",
        "label": "Sequence values to indexes",
        "description": "Transforms the sequence of values to their respective indexes in the sequence.\n  Example:\n   - (\"a\", \"b\", \"c\") becomes (0, 1, 2)\n\n  If there is more than one input, the values are numbered from the first input on and continued for the next inputs.\n  Applied against an RDF source the order might not be deterministic.\n",
        "categories": ["Sequence"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "regexSelect",
        "label": "Regex selection",
        "description": "\n      This transformer takes 3 inputs.\n      The first input should have exactly one value that should be passed out again untouched.\n      The second input has at least two Regex values - two in order to make sense.\n      The third input should have exactly one value which is checked against the regexes.\n\n      The result of the transformer is a sequence with the same length of number of regexes.\n      For the output value (of the first input) is set to each position in this sequence where\n      the related regex also matched.\n\n      If oneOnly is true only the position of the <strong>first</strong> matching regex will be set to the output value.\n    ",
        "categories": ["Selection"],
        "parameterSpecification": {
            "oneOnly": {
                "label": "One only",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "coalesce",
        "label": "Coalesce (first non-empty input)",
        "description": "Forwards the first non-empty input, i.e. for which any value(s) exist. A single empty string is considered a value.",
        "categories": ["Selection"],
        "parameterSpecification": {},
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "TransformOperator",
        "pluginId": "python2Script",
        "label": "Python 2 script",
        "description": "Executes a user-defined Python 2 script.\n   The script must define a function to be executed for each set of input values.\n   The function may either accept a separate argument for each input or a variable number of arguments.\n   For each input, the argument type is an array of strings.",
        "categories": ["Scripting"],
        "parameterSpecification": {
            "script": {
                "label": "Script",
                "description": "Script that defines a function to be executed for each set of input values",
                "advanced": false,
                "required": false,
                "type": "textArea",
                "defaultValue": "def transform(*inputs):\n  return inputs[0]"
            },
            "function": {
                "label": "Function",
                "description": "Function to be called for each set of input values",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "transform"
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Transform"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "PhysicalQuantitiesDistance",
        "label": "Compare physical quantities",
        "description": "Computes the distance between two physical quantities.\nThe distance is normalized to the SI base unit of the dimension.\nFor instance for lengths, the distance will be in metres.\nComparing incompatible units will yield a validation error.\n ",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "numberFormat": {
                "label": "Number format",
                "description": "The IETF BCP 47 language tag, e.g., 'en'.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "en"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "koreanPhonemeDistance",
        "label": "Korean phoneme distance",
        "description": "Korean phoneme distance.",
        "categories": ["Language"],
        "parameterSpecification": {
            "minChar": {
                "label": "Min char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "koreanTranslitDistance",
        "label": "Korean translit distance",
        "description": "Transliterated Korean distance.",
        "categories": ["Language"],
        "parameterSpecification": {
            "minChar": {
                "label": "Min char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "cjkReadingDistance",
        "label": "CJK reading distance",
        "description": "CJK Reading Distance.",
        "categories": ["Language"],
        "parameterSpecification": {
            "minChar": {
                "label": "Min char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "levenshtein",
        "label": "Normalized Levenshtein distance",
        "description": "Normalized Levenshtein distance.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "minChar": {
                "label": "Min char",
                "description": "The minimum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "The maximum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "levenshteinDistance",
        "label": "Levenshtein distance",
        "description": "Levenshtein distance. Returns a distance value between zero and the size of the string.",
        "categories": ["Characterbased", "Recommended"],
        "parameterSpecification": {
            "minChar": {
                "label": "Min char",
                "description": "The minimum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "The maximum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "jaro",
        "label": "Jaro distance",
        "description": "String similarity based on the Jaro distance metric.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "jaroWinkler",
        "label": "Jaro-Winkler distance",
        "description": "String similarity based on the Jaro-Winkler distance measure.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "insideNumericInterval",
        "label": "Inside numeric interval",
        "description": "Checks if a number is contained inside a numeric interval, such as '1900 - 2000'.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "separator": {
                "label": "Separator",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "—|–|-"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "qGrams",
        "label": "qGrams",
        "description": "String similarity based on q-grams (by default q=2).",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "q": {
                "label": "Q",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "2"
            },
            "minChar": {
                "label": "Min char",
                "description": "The minimum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "0"
            },
            "maxChar": {
                "label": "Max char",
                "description": "The maximum character that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "textField",
                "defaultValue": "z"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "substringDistance",
        "label": "Substring comparison",
        "description": "Return 0 to 1 for strong similarity to weak similarity. Based on the paper: Stoilos, Giorgos, Giorgos Stamou, and Stefanos Kollias. \"A string metric for ontology alignment.\" The Semantic Web-ISWC 2005. Springer Berlin Heidelberg, 2005. 624-637.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "granularity": {
                "label": "Granularity",
                "description": "The minimum length of a possible substring match.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "3"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "equality",
        "label": "String equality",
        "description": "Checks for equality of the string representation of the given values. Returns success if string values are equal, failure otherwise. For a numeric comparison of values use the 'Numeric Equality' comparator.",
        "categories": ["Equality", "Recommended"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "inequality",
        "label": "Inequality",
        "description": "Returns success if values are not equal, failure otherwise.",
        "categories": ["Equality"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "lowerThan",
        "label": "Lower than",
        "description": "Checks if the source value is lower than the target value.",
        "categories": ["Equality"],
        "parameterSpecification": {
            "orEqual": {
                "label": "Or equal",
                "description": "Accept equal values",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "order": {
                "label": "Order",
                "description": "Per default, if both strings are numbers, numerical order is used for comparison. Otherwise, alphanumerical order is used. Choose a more specific order for improved performance.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "Autodetect"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": true
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "greaterThan",
        "label": "Greater than",
        "description": "Checks if the source value is greater than the target value. If both strings are numbers, numerical order is used for comparison. Otherwise, alphanumerical order is used.",
        "categories": ["Equality"],
        "parameterSpecification": {
            "orEqual": {
                "label": "Or equal",
                "description": "Accept equal values",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "order": {
                "label": "Order",
                "description": "Per default, if both strings are numbers, numerical order is used for comparison. Otherwise, alphanumerical order is used. Choose a more specific order for improved performance.",
                "advanced": false,
                "required": false,
                "type": "textField",
                "autoCompletion": {
                    "allowOnlyAutoCompletedValues": true,
                    "autoCompleteValueWithLabels": true,
                    "autoCompletionDependsOnParameters": []
                },
                "defaultValue": "Autodetect"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": true
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "num",
        "label": "Numeric similarity",
        "description": "Computes the numeric distance between two numbers.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "minValue": {
                "label": "Min index value",
                "description": "The minimum number that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "float",
                "defaultValue": "-Infinity"
            },
            "maxValue": {
                "label": "Max index value",
                "description": "The maximum number that is used for indexing",
                "advanced": true,
                "required": false,
                "type": "float",
                "defaultValue": "Infinity"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "date",
        "label": "Date",
        "description": "The distance in days between two dates ('YYYY-MM-DD' format).",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "requireMonthAndDay": {
                "label": "Require month and day",
                "description": "If true, no distance value will be generated if months or days are missing (e.g., 2019-11). If false, missing month or day fields will default to 1.",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "dateTime",
        "label": "DateTime",
        "description": "Distance between two date time values (xsd:dateTime format) in seconds.",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "wgs84",
        "label": "Geographical distance",
        "description": "Computes the geographical distance between two points. Author: Konrad Höffner (MOLE subgroup of Research Group AKSW, University of Leipzig)",
        "categories": ["Numeric"],
        "parameterSpecification": {
            "unit": {
                "label": "Unit",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "km"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "jaccard",
        "label": "Jaccard",
        "description": "Jaccard similarity coefficient.",
        "categories": ["Tokenbased", "Recommended"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "dice",
        "label": "Dice coefficient",
        "description": "Dice similarity coefficient.",
        "categories": ["Tokenbased"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "softjaccard",
        "label": "Soft Jaccard",
        "description": "Soft Jaccard similarity coefficient. Same as Jaccard distance but values within an levenhstein distance of 'maxDistance' are considered equivalent.",
        "categories": ["Tokenbased"],
        "parameterSpecification": {
            "maxDistance": {
                "label": "Max distance",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "1"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "tokenwiseDistance",
        "label": "Token-wise distance",
        "description": "Token-wise string distance using the specified metric.",
        "categories": ["Tokenbased"],
        "parameterSpecification": {
            "ignoreCase": {
                "label": "Ignore case",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "true"
            },
            "metricName": {
                "label": "Metric name",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "levenshtein"
            },
            "splitRegex": {
                "label": "Split regex",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": "[\\s\\d\\p{Punct}]+"
            },
            "stopwords": {
                "label": "Stopwords",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "textField",
                "defaultValue": ""
            },
            "stopwordWeight": {
                "label": "Stopword weight",
                "description": "Weight assigned to stopwords",
                "advanced": true,
                "required": false,
                "type": "float",
                "defaultValue": "0.01"
            },
            "nonStopwordWeight": {
                "label": "Non stopword weight",
                "description": "Weight assigned to non-stopwords",
                "advanced": true,
                "required": false,
                "type": "float",
                "defaultValue": "0.1"
            },
            "useIncrementalIdfWeights": {
                "label": "Use incremental idf weights",
                "description": "Use incremental IDF weights",
                "advanced": true,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "matchThreshold": {
                "label": "Match threshold",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "0.0"
            },
            "orderingImpact": {
                "label": "Ordering impact",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "0.0"
            },
            "adjustByTokenLength": {
                "label": "Adjust by token length",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "boolean",
                "defaultValue": "false"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "relaxedEquality",
        "label": "Relaxed equality",
        "description": "Return success if strings are equal, failure otherwise. Lower/upper case and differences like ö/o, n/ñ, c/ç etc. are treated as equal.",
        "categories": ["Equality"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "cosine",
        "label": "Cosine",
        "description": "Cosine Distance Measure.",
        "categories": ["Tokenbased"],
        "parameterSpecification": {
            "k": {
                "label": "K",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "3"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "constantDistance",
        "label": "Constant",
        "description": "Always returns a constant similarity value.",
        "categories": ["Equality"],
        "parameterSpecification": {
            "value": {
                "label": "Value",
                "description": "No description",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "1.0"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "startsWith",
        "label": "Starts with",
        "description": "Returns success if the first string starts with the second string, failure otherwise.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "minLength": {
                "label": "Min length",
                "description": "The minimum length of the string being contained.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "2"
            },
            "maxLength": {
                "label": "Max length",
                "description": "The potential maximum length of the strings that must match. If the max length is greater  than the length of the string to match, the full string must match.",
                "advanced": false,
                "required": false,
                "type": "int",
                "defaultValue": "2147483647"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": true
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "isSubstring",
        "label": "Is substring",
        "description": "Checks if a source value is a substring of a target value.",
        "categories": ["Characterbased"],
        "parameterSpecification": {
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": true
    },
    {
        "pluginType": "ComparisonOperator",
        "pluginId": "numericEquality",
        "label": "Numeric equality",
        "description": "Compares values numerically instead of their string representation as the 'String Equality' operator does.\nAllows to set the needed precision of the comparison. A value of 0.0 means that the values must represent exactly the same\n(floating point) value, values higher than that allow for a margin of tolerance. Example: With a precision of 0.1, the\nfollowing pairs of values will be considered equal: (1.3, 1.35), (0.0, 0.9999), (0.0, -0.90001), but following pairs will NOT match:\n(1.2, 1.30001), (1.0, 1.10001), (1.0, 0.89999).",
        "categories": ["Equality", "Recommended"],
        "parameterSpecification": {
            "precision": {
                "label": "Precision",
                "description": "The range of tolerance in floating point number comparisons. Must be 0 or a non-negative number smaller than 1.",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "0.0"
            },
            "threshold": {
                "label": "Threshold",
                "defaultValue": "0.0",
                "type": "float",
                "description": "The maximum distance. For normalized distance measures, the threshold should be between 0.0 and 1.0.",
                "advanced": false,
                "required": true
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 2,
            "maxInputPorts": 2
        },
        "tags": ["Comparison"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "average",
        "label": "Average",
        "description": "Computes the weighted average.",
        "categories": ["Recommended"],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "max",
        "label": "Or",
        "description": "At least one input score must be within the threshold. Selects the maximum score.",
        "categories": ["Recommended"],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "min",
        "label": "And",
        "description": "All input scores must be within the threshold. Selects the minimum score.",
        "categories": ["Recommended"],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "quadraticMean",
        "label": "Euclidian distance",
        "description": "Calculates the Euclidian distance.",
        "categories": [],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "geometricMean",
        "label": "Geometric mean",
        "description": "Compute the (weighted) geometric mean.",
        "categories": [],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "negate",
        "label": "Negate",
        "description": "Negates the result of the input comparison. A single input is expected. Using this operator can have a performance impact, since it lowers the efficiency of the underlying computation.",
        "categories": [],
        "parameterSpecification": {
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "scale",
        "label": "Scale",
        "description": "Scales the result of the first input. All other inputs are ignored.",
        "categories": [],
        "parameterSpecification": {
            "factor": {
                "label": "Factor",
                "description": "All input similarity values are multiplied with this factor.",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "1.0"
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    },
    {
        "pluginType": "AggregationOperator",
        "pluginId": "handleMissingValues",
        "label": "Handle missing values",
        "description": "Generates a default similarity score, if no similarity score is provided (e.g., due to missing values). Using this operator can have a performance impact, since it lowers the efficiency of the underlying computation.",
        "categories": ["Recommended"],
        "parameterSpecification": {
            "defaultValue": {
                "label": "Default value",
                "description": "The default value to be generated, if no similarity score is provided. Must be a value between -1 (inclusive) and 1 (inclusive). '1' represents boolean true and '-1' represents boolean false.",
                "advanced": false,
                "required": false,
                "type": "float",
                "defaultValue": "-1.0"
            },
            "weight": {
                "label": "Weight",
                "defaultValue": "1",
                "type": "int",
                "description": "The weight parameter can be used by the parent aggregation when combining its input values. Only certain aggregations will consider weighted inputs. Examples are the weighted average aggregation, quadraticMean and geometricMean.",
                "advanced": true,
                "required": true
            }
        },
        "portSpecification": {
            "minInputPorts": 1
        },
        "tags": ["Aggregation"],
        "inputsCanBeSwitched": false
    }
]
